




#include <QCoreApplication>
#include <QThread>
#include <QThreadPool>
#include <QRunnable>
#include <QDebug>
#include <QElapsedTimer>

// WorkerThread using QThread
class WorkerThread : public QThread {
protected:
    void run() override {
        qDebug() << "QThread running on thread:" << QThread::currentThread();
        QThread::sleep(2);  // Simulating a long-running task
    }
};

// TaskRunner using QThreadPool
class TaskRunner : public QRunnable {
public:
    void run() override {
        qDebug() << "QRunnable running on thread:" << QThread::currentThread();
        QThread::sleep(2);  // Simulating a long-running task
    }
};

int main(int argc, char *argv[]) {
    QCoreApplication app(argc, argv);

    QElapsedTimer timer;

    // **1. QThread Execution**
    timer.start();
    WorkerThread *thread1 = new WorkerThread();
    WorkerThread *thread2 = new WorkerThread();

    thread1->start();
    thread2->start();

    thread1->wait();
    thread2->wait();

    delete thread1;
    delete thread2;
    qDebug() << "QThread Execution Time:" << timer.elapsed() << "ms";

    // **2. QThreadPool Execution**
    timer.restart();
    QThreadPool *pool = QThreadPool::globalInstance();

    TaskRunner *task1 = new TaskRunner();
    TaskRunner *task2 = new TaskRunner();

    task1->setAutoDelete(true);
    task2->setAutoDelete(true);

    pool->start(task1);
    pool->start(task2);

    pool->waitForDone();
    qDebug() << "QThreadPool Execution Time:" << timer.elapsed() << "ms";

    return 0;
}




------------------

#include "widget.h"
#include "ui_widget.h"
#include <QDebug>


Widget::Widget(QWidget *parent)
    : QWidget(parent)
    , ui(new Ui::Widget)
{
    ui->setupUi(this);
    qDebug()<<"Main thread"<<QThread::currentThread();
}

Widget::~Widget()
{
    delete ui;
}

void counting1()
{
    for(int i{0} ; i < 10 ; i ++){
                qDebug() << "Counting method called : " << i <<
                            " thread :" << QThread::currentThread() << " id : " <<QThread::currentThreadId();              //
            }

}


void Widget::on_pushButton_clicked()
{/*
    for(int i{0} ; i < 10 ; i ++){
                qDebug() << "Counting method called : " << i <<
                            " thread :" << QThread::currentThread() << " id : " <<QThread::currentThreadId();              //
            }*/


   QThread* thread = QThread::create(counting1,10000);
}




Mastering Qt Threading: Concepts and Explanations

Qt provides multiple threading techniques, each suited for different use cases. Understanding their principles, usage, and best practices is essential for writing efficient multi-threaded Qt applications. Below is a breakdown of each method:


---

1. MoveToThread

Concept:

QObject::moveToThread() moves an object to another thread.

The object’s slots execute in the new thread, while its signals remain in the main thread.

Ideal for worker objects that need to execute tasks without subclassing QThread.

The event loop of the new thread invokes the worker’s slots.


Use Case:

Running long-running operations in a separate thread without modifying the worker class.


Key Points:

The worker object remains in the main thread until moveToThread() is called.

Signals and slots facilitate communication between threads.

The thread starts execution when QThread::start() is called.


 MoveToThread
Concept: Move a QObject worker to a separate thread to run its slots there. Ideal for offloading work without subclassing QThread.
Code:
#include <QObject>
#include <QThread>
#include <QDebug>

class Worker : public QObject {
    Q_OBJECT
public slots:
    void doWork() {
        qDebug() << "Working in thread:" << QThread::currentThreadId();
        for (int i = 0; i < 3; ++i) {
            qDebug() << "Work step" << i;
            QThread::sleep(1);
        }
        emit finished();
    }
signals:
    void finished();
};

int main() {
    QThread thread;
    Worker worker;
    worker.moveToThread(&thread); //worker class slots run in the differnt thread rest const and destructor on main thread
QObject::connect(&thread, &QThread::started, &worker, &Worker::doWork);
    QObject::connect(&worker, &Worker::finished, &thread, &QThread::quit);
    thread.start();
    thread.wait();
    return 0;
}
Output:
Working in thread: 0x<thread_id>
Work step 0
Work step 1
Work step 2



---

---

2. Subclassing QThread

Concept:

Inherit from QThread and override run() to define thread execution.

Unlike moveToThread(), the entire object lives in the new thread.

This approach runs code inside run(), without an event loop.


Use Case:

When you need direct control over the execution flow and no event loop is needed.


Key Points:

Only run() executes in the thread; other functions run in the main thread.

QThread::sleep() can be used inside run().

Not recommended for general use due to potential misuse (e.g., calling exec() inside run()).



Subclass QThread
Concept: Subclass QThread and override run() to define thread behavior. Only run() executes in the new thread.
Code:
#include <QThread>
#include <QDebug>

class MyThread : public QThread {
    Q_OBJECT
protected:
    void run() override {
        qDebug() << "Thread ID:" << QThread::currentThreadId();
        for (int i = 0; i < 3; ++i) {
            qDebug() << "Step" << i;
            sleep(1);
        }
    }
};

int main() {
    MyThread thread;
    thread.start();
    thread.wait();
    return 0;
}
Output:
Thread ID: 0x<thread_id>
Step 0
Step 1
Step 2

#ifndef MYTHREAD_H
#define MYTHREAD_H

#include <QObject>
#include <QThread>
#include <QDebug>

class MyThread : public QThread
{
    Q_OBJECT
protected:

    void run() override {
        qDebug() << "Thread ID:" << QThread::currentThreadId();
        for (int i = 0; i < 3; ++i) {
            qDebug() << "Step" << i;
            QThread::sleep(1);
        }
    }

public:
    void display(){

        qDebug()<<"hello display here!! " << QThread::currentThreadId();

    }
};

#endif // MYTHREAD_H





hello world!!  0x7524
hello display here!!  0x7524
Thread ID: 0x72bc
Step 0
Step 1
Step 2
Press <RETURN> to close this window...

---

3. QThread::create

Concept:

Introduced in Qt 5.10, QThread::create() allows running a function in a thread without subclassing.

A simple way to execute one-off asynchronous tasks.


Use Case:

Running short-lived tasks without managing a QThread object manually.


Key Points:

A function is provided to QThread::create(), which runs in a new thread.

Easier to use than subclassing QThread.

Automatically cleans up after execution.

 QThread with Asynchronous Code – QThread::create
Concept: Use QThread::create to run a function in a thread. Simplifies one-off async tasks (Qt 5.10+).
Code:
#include <QThread>
#include <QDebug>

void workFunction() {
    qDebug() << "Async work in thread:" << QThread::currentThreadId();
    QThread::sleep(2);
}

int main() {
    QThread* thread = QThread::create(workFunction);
    thread->start();
    thread->wait();
    delete thread;
    return 0;
}
Output:
Async work in thread: 0x<thread_id>



---

4. MoveToThread with Signals for Async Execution

Concept:

Like moveToThread(), but designed to work asynchronously with signals.

The worker’s slot runs in a separate thread, and signals return results to the main thread.


Use Case:

When results need to be processed asynchronously in the main thread.



4. QThread with Asynchronous Code – MoveToThread
Concept: Use MoveToThread with signals for async-like behavior. Worker slots run in the thread, signals communicate results.
Code:


#include <QObject>
#include <QThread>
#include <QDebug>

class Worker : public QObject {
    Q_OBJECT
public slots:
    void doWork() {
        qDebug() << "Async-like work";
        QThread::sleep(1);
        emit resultReady(42);
    }
signals:
    void resultReady(int result);
};

int main() {
    QThread thread;
    Worker worker;
    worker.moveToThread(&thread);
    QObject::connect(&thread, &QThread::started, &worker, &Worker::doWork);
    QObject::connect(&worker, &Worker::resultReady, [](int r) { qDebug() << "Result:" << r; });
    QObject::connect(&worker, &Worker::resultReady, &thread, &QThread::quit);
    thread.start();
    thread.wait();
    return 0;
}
Output:
Async-like work
Result: 42



Key Points:

Useful for GUI applications where work must be done in a thread, but UI updates should remain in the main thread.

Signals handle result communication.

---

5. Subclass QThread with Signals for Async Feedback

Concept:

Like normal QThread subclassing, but includes signals to send feedback to the main thread.


Use Case:

When you need periodic updates from the thread.


Key Points:

emit is used to send signals from the thread to the main thread.

run() still controls the execution.

The main thread connects to signals to receive progress updates.


5. QThread with Asynchronous Code – Subclass Thread
Concept: Subclass QThread and use signals for async feedback from the thread to the main app.
Code:
#include <QThread>
#include <QDebug>

class MyThread : public QThread {
    Q_OBJECT
signals:
    void progress(int value);
protected:
    void run() override {
        for (int i = 0; i <= 100; i += 25) {
            emit progress(i);
            sleep(1);
        }
    }
};

int main() {
    MyThread thread;
    QObject::connect(&thread, &MyThread::progress, [](int p) { qDebug() << "Progress:" << p; });
    thread.start();
    thread.wait();
    return 0;
}
Output:
Progress: 0
Progress: 25
Progress: 50
Progress: 75
Progress: 100



---

6. QThreadPool and QRunnable

Concept:

QThreadPool manages a pool of worker threads, and QRunnable represents tasks.

Instead of creating individual threads, you submit tasks to the pool.

The pool automatically assigns threads based on availability.


Use Case:

When you need to run many small, independent tasks concurrently.


Key Points:

Prevents thread creation overhead by reusing threads.

Can run multiple tasks simultaneously.

QThreadPool::start() executes a QRunnable object.


 ThreadPool and QRunnable
Concept: QThreadPool manages a pool of threads; QRunnable defines reusable tasks. Good for multiple small jobs.
Code:
#include <QThreadPool>
#include <QRunnable>
#include <QDebug>

class MyRunnable : public QRunnable {
    void run() override {
        qDebug() << "Runnable in thread:" << QThread::currentThreadId();
        QThread::sleep(1);
    }
};

int main() {
    QThreadPool pool;
    pool.setMaxThreadCount(2);
    pool.start(new MyRunnable);
    pool.waitForDone();
    return 0;
}
Output:
Runnable in thread: 0x<thread_id>



---

7. ThreadPool and QRunnable – Sending Feedback

Concept:

Extends QRunnable with signals to notify the main thread of results.


Use Case:

When you need a thread pool to process tasks and send results asynchronously.


Key Points:

QObject must be inherited alongside QRunnable to use signals.

Allows the UI or another component to update based on worker results.



---

8. ThreadPool and QRunnable – Async Code

Concept:

A lightweight approach to running background tasks in a thread pool.


Use Case:

When quick, independent tasks need to run asynchronously without waiting.


Key Points:

QThreadPool::globalInstance() ensures shared thread pool usage.

Ideal for background calculations and non-blocking tasks.



---

9. Custom Type Signal Parameters

Concept:

Custom data structures can be passed between threads using signals and slots.

Qt requires registering custom types with qRegisterMetaType().


Use Case:

When complex data needs to be transferred between threads safely.


Key Points:

Custom structs/classes must be declared with Q_DECLARE_METATYPE().

Ensures type safety when sending data across threads.



---

10. Threading Methods Comparison


---

Final Thoughts

For background workers: Use moveToThread().

For simple threads: Subclass QThread, but avoid it for event-driven work.

For task-based concurrency: Use QThreadPool and QRunnable.

For quick async jobs: QThread::create() is the easiest option.

For periodic updates: Use signals to communicate with the main thread.


By mastering these techniques, you can effectively implement multi-threading in Qt applications!


Qt Threading Notes
Date: February 24, 2025
Notes for learning threading in Qt with concepts, code, and output.

---


---



---



---



---


---



---

7. ThreadPool and QRunnable – Sending Feedback to UI
Concept: Use QRunnable with signals to send updates to the UI. Pair with a controller QObject for real apps.
Code:
#include <QThreadPool>
#include <QRunnable>
#include <QObject>
#include <QDebug>

class Worker : public QObject, public QRunnable {
    Q_OBJECT
signals:
    void result(int value);
protected:
    void run() override {
        qDebug() << "Working...";
        QThread::sleep(1);
        emit result(100);
    }
};

int main() {
    QThreadPool pool;
    Worker* worker = new Worker;
    QObject::connect(worker, &Worker::result, [](int v) { qDebug() << "UI update:" << v; });
    pool.start(worker);
    pool.waitForDone();
    return 0;
}
Output:
Working...
UI update: 100

---

8. ThreadPool and QRunnable – Async Code
Concept: Run lightweight async tasks in QThreadPool. Minimal setup for quick jobs.
Code:
#include <QThreadPool>
#include <QRunnable>
#include <QDebug>

class QuickTask : public QRunnable {
    void run() override {
        qDebug() << "Quick async task";
    }
};

int main() {
    QThreadPool::globalInstance()->start(new QuickTask);
    QThreadPool::globalInstance()->waitForDone();
    return 0;
}
Output:
Quick async task

---

9. Custom Type Signal Parameters
Concept: Pass custom data types via signals. Register them with Qt for thread-safety.
Code:
#include <QObject>
#include <QMetaType>
#include <QDebug>

struct MyData { int x; QString s; };
Q_DECLARE_METATYPE(MyData)

class Emitter : public QObject {
    Q_OBJECT
signals:
    void sendData(MyData data);
};

int main() {
    qRegisterMetaType<MyData>("MyData");
    Emitter emitter;
    QObject::connect(&emitter, &Emitter::sendData, [](MyData d) {
        qDebug() << "Received:" << d.x << d.s;
    });
    emitter.sendData({42, "Hello"});
    return 0;
}
Output:
Received: 42 "Hello"

---

10. Threading Methods Comparison
Concept: Compare Qt threading approaches for different use cases.
Explanation:
- QThread Subclass: Rigid, good for simple tasks.
- MoveToThread: Flexible, signal-driven, best for workers.
- QThreadPool/QRunnable: Scalable for many short tasks.
Code: See examples above for practical differences.
Output: Varies by method; review prior outputs.

---

