Memory Management

Stack vs Heap
-------------

Stack - Automatic
-safe space
-limited space for OS
-automatically allocate and deallocate memory


Heap
Pointers are variable that typically live on the stack that point to object created on the heap

New -allocate heap
Delete-deallocate from heap

eg-> Int main()
   {
//Allocate
cat* c= new cat();
//Deallocate
delete c;
   }


Memory Leaks

When the memory is not deallocated then from stack the memory will be automatically deallocate but the heap memory will be there still..
hence when a function calls the heap memory will be allocate and the memory will become full.

Dangling pointer

Int main()
   {
//Allocate
cat* c= new cat();
//Deallocate
delete c;
c->meow(); ////case occur
   }

Smart Pointers 
Are variables that automatically delete !!
syntax->

int main()
{
shared_ptr<Cat> kitty =shared_ptr<Cat>(new Cat());

//NO NEED OF EXTERNALLY DELETEING

}

1.unique_ptr -only on ecopy can exist
2.shared_ptr-reference counting, many copies
3.weak_ptr-weak reference 
4.auto_ptr-replaced by unique_ptr

 THERE IS QT SMART POINTERS ->>> QScopedPointer


#ifndef TEST_H
#define TEST_H

#include <QObject>
#include <QDebug>

class Test : public QObject
{
    Q_OBJECT
public:
    explicit Test(QObject *parent = nullptr, QString name = "");
    ~Test();
signals:

};

#endif // TEST_H

#include "test.h"

Test::Test(QObject *parent,QString name) : QObject(parent)
{
    setObjectName(name);
    qInfo() << "Constructed" << this;
}

Test::~Test()
{
    qInfo() << "Deconstructed" << this;
}



#include <QCoreApplication>
#include <QScopedPointer>
#include "test.h"

void test()
{
    QScopedPointer<Test> sp(new Test());
    sp->setObjectName("My Test");

    qInfo() << "Scoped Pointer :" << &sp;
    qInfo() << "Pointer Data :" << sp.data();
    qInfo() << sp->objectName();

}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    test();

    return a.exec();
}

o/p
Constructed Test(0x1307290)
Scoped Pointer : 0x6ffe30
Pointer Data : Test(0x1307290, name = "My Test")
"My Test"
Deconstructed Test(0x1307290, name = "My Test")


->QSharedPointer

/*

  What
  QSharedPointer

  Why
  Manual memory management is error prone

  How
  See below
*/

#include <QCoreApplication>
#include <QSharedPointer>
#include "test.h"

QSharedPointer<Test> getObject(QString name)
{
    QSharedPointer<Test> sp(new Test());
    sp->setObjectName(name);
    //Do other things here
    return sp;
}

void doWork(QSharedPointer<Test> sp)
{
    //We are using a copy of the sharedpointer
    qInfo() << "Work" << sp.data();
    qInfo() << "SharedPointer" << &sp;
}

void test()
{
    qInfo() << "Getting the object";
    QSharedPointer<Test> ptr = getObject("My Object");
    qInfo() << "SharedPointer" << &ptr;
    qInfo() << "Object" << ptr.data();

    doWork(ptr);


    //Reference count is zero
    qInfo() << "Complete";
}


int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    test();
    return a.exec();
}



output------------

Getting the object
Constructed Test(0x1fadd8)
SharedPointer 0x6ffe14
Object Test(0x1fadd8, name = "My Object")
Work Test(0x1fadd8, name = "My Object")
SharedPointer 0x6ffe70
Complete
Deconstructed Test(0x1fadd8, name = "My Object")

-------------------------------------------------------


-------------------------------------------------------------------------------------

Parent child relation-

#ifndef TEST_H
#define TEST_H

#include <QObject>
#include <QDebug>


class Test : public QObject
{
    Q_OBJECT
public:
    explicit Test(QObject *parent = nullptr, QString name = "");
    ~Test();
signals:

};

#endif // TEST_H


#include "test.h"

Test::Test(QObject *parent, QString name) : QObject(parent)
{
    setObjectName(name);
    qInfo()<<"Constructed"<<this;
    
}

Test::~Test()
{
    qInfo()<<"Dec onstructed"<<this;
     
}



/*
    What
    Parent child relationships

    Why
    QObject built in memory managment

    How
    Making an object tree

*/


#include <QCoreApplication>
#include "test.h"

Test* makeTree()
{
    Test* root = new Test(nullptr,"Root");

    for(int p = 0; p < 5; p++)
    {
        Test* pobj = new Test(root,"Parent-" + QString::number(p));

        for(int c = 0; c < 3; c++)
        {
            Test* cobj = new Test(pobj,"Child-"  + QString::number(p) + " " + QString::number(c));
            for(int s = 0; s < 3; s++)
            {
                Test* sobj = new Test(cobj,"Sub-"  + QString::number(p) + " " + QString::number(c)  + " " + QString::number(s));
                Q_UNUSED(sobj);
            }
        }
    }

    return root;
}

void printTree(Test* root, int level = 0)
{
    if(root->children().length() == 0) return; //check number of children in root

    QString lead = "-";
    lead.fill('-', level * 5);

    foreach(QObject* obj, root->children()) 
    {
        Test* child = qobject_cast<Test*>(obj);  //convert QObject* to Test*
        if(!child) return;

        qInfo() << lead << child;

        printTree(child,level + 1);
    }
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    Test* tree = makeTree();
    printTree(tree,1);
    delete tree;

    return a.exec();
}



<<<<<------------------------| Parent&child new way |----------------->>>>>


#include <QCoreApplication>
#include <QDebug>

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QObject parent;
    parent.setObjectName("Father");

    QObject child;
    child.setObjectName("Child");

    child.setParent(&parent);

    QObject child2;
    child2.setObjectName("Child2");

    child2.setParent(&parent);


    //Get the parent
    qInfo() << child.parent();

    //get the children
    qInfo() << parent.children();  //Qlist

    foreach(QObject* obj, parent.children())
    {
        qInfo() << obj;
    }

    return a.exec();
}


output

QObject(0x66fe4c, name = "Father")
(QObject(0x66fe44, name = "Child"), QObject(0x66fe3c, name = "Child2"))
QObject(0x66fe44, name = "Child")
QObject(0x66fe3c, name = "Child2")

---------------------------------------------------------------------------------
---------------------------------------------------------------------------------

View



/*

  What
  Sharing a pointer among multiple objects


  Why
  We want a smart pointer, but we want to share it

  How
  Cats and a toy
  Note we may not use smart pointers often in this course
 */
cat------------------

#ifndef CAT_H
#define CAT_H

#include <QObject>
#include <QDebug>
#include <QSharedPointer>
#include "toy.h"

class Cat : public QObject
{
    Q_OBJECT
public:
    explicit Cat(QObject *parent = nullptr, QString name = "");
    ~Cat();

    void play(QSharedPointer<Toy> toy);

signals:

private:
    QSharedPointer<Toy> m_toy;
};

#endif // CAT_H

cat.cpp--------------------------------

#include "cat.h"

Cat::Cat(QObject *parent, QString name) : QObject(parent)
{
    setObjectName(name);
    qInfo() << "Constructed" << this;
}

Cat::~Cat()
{
    qInfo() << "Deconstructed" << this;
}

void Cat::play(QSharedPointer<Toy> toy)
{
    m_toy.swap(toy);
    qInfo() << this << "Playing with" << m_toy.data();
}

test.h---------------------------------------
#ifndef TEST_H
#define TEST_H

#include <QObject>
#include <QDebug>

class Test : public QObject
{
    Q_OBJECT
public:
    explicit Test(QObject *parent = nullptr, QString name = "");
    ~Test();
signals:

};

#endif // TEST_H

test.cpp--------------------------------------------
#include "test.h"

Test::Test(QObject *parent,QString name) : QObject(parent)
{
    setObjectName(name);
    qInfo() << "Constructed" << this;
}

Test::~Test()
{
    qInfo() << "Deconstructed" << this;
}

toy.h-----------------------------------------------

#ifndef TOY_H
#define TOY_H

#include <QObject>
#include <QDebug>

class Toy : public QObject
{
    Q_OBJECT
public:
    explicit Toy(QObject *parent = nullptr, QString name = "");
    ~Toy();
signals:

};

#endif // TOY_H

toy.cpp-----------------------------------------------------

#include "toy.h"

Toy::Toy(QObject *parent, QString name) : QObject(parent)
{
    setObjectName(name);
    qInfo() << "Constructed" << this;
}

Toy::~Toy()
{
    qInfo() << "Deconstructed" << this;
}


msin.cpp-------------------------------------

#include <QCoreApplication>
#include <QSharedPointer>
#include "cat.h"
#include "toy.h"
#include <vector>

void test()
{
    int max = 5;
    QSharedPointer<Toy> toy(new Toy());
    std::vector<QSharedPointer<Cat>> cats(max);

    for(int i = 0; i < max; i++)
    {
        cats[i].reset(new Cat());
        cats[i]->play(toy);
    }

    qInfo() << "All cats are done!";
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    test();
    return a.exec();
}



Program Flow of the Given Code (Step-by-Step Execution)

This program demonstrates shared ownership of a toy among multiple cats using QSharedPointer. Let's go through the execution flow in five stages:


---

1. Program Initialization (main.cpp)

1. QCoreApplication starts (main() function).


2. The test() function is called.




---

2. Creating a Shared Toy (test())

1. QSharedPointer<Toy> toy(new Toy());

Creates a shared pointer toy that owns a new Toy object.

Output:

Constructed Toy(0x1fadd8)



2. std::vector<QSharedPointer<Cat>> cats(max);

Creates a vector to store max = 5 shared pointers to Cat objects.





---

3. Creating and Assigning Cats (for loop in test())

The loop runs 5 times, creating 5 Cat objects.

First Iteration (i = 0):

1. cats[i].reset(new Cat());

Creates a new Cat and assigns it to cats[0].

Output:

Constructed Cat(0x2a9bc0)



2. cats[i]->play(toy);

Calls the play() function of Cat with the shared toy.

Inside play(), m_toy.swap(toy); swaps the cat’s toy with the given toy.

Output:

Cat(0x2a9bc0) Playing with Toy(0x1fadd8)




Second Iteration (i = 1):

1. cats[1] gets a new Cat instance.

Output:

Constructed Cat(0x2a9be0)



2. cats[1]->play(toy);

Output:

Cat(0x2a9be0) Playing with Toy(0x1fadd8)




Remaining Iterations (i = 2, 3, 4)

Each cat is created and starts playing with the same shared toy:

Constructed Cat(0x2a9c00)
Cat(0x2a9c00) Playing with Toy(0x1fadd8)

Constructed Cat(0x2a9c20)
Cat(0x2a9c20) Playing with Toy(0x1fadd8)

Constructed Cat(0x2a9c40)
Cat(0x2a9c40) Playing with Toy(0x1fadd8)


---

4. All Cats Finish Playing

1. After the loop, the message "All cats are done!" is printed.

All cats are done!


2. test() function ends.




---

5. Cleanup (Automatic Deletion)

Since QSharedPointer is reference-counted, once test() exits:

1. All QSharedPointer<Cat> instances go out of scope.


2. Each Cat object is deleted one by one.

Deconstructed Cat(0x2a9bc0)
Deconstructed Cat(0x2a9be0)
Deconstructed Cat(0x2a9c00)
Deconstructed Cat(0x2a9c20)
Deconstructed Cat(0x2a9c40)


3. Last reference to toy is lost, so it is deleted.

Deconstructed Toy(0x1fadd8)


4. main() ends, and the program exits.




---

Summary of Execution

1. A single Toy is created and shared.


2. 5 Cats are created and play with the shared toy.


3. The program prints "All cats are done!".


4. When the function ends, all Cats are deleted, followed by the Toy.




---

Key Learning

QSharedPointer manages memory automatically (deletes when no references remain).

Multiple objects (Cats) can share ownership of a single resource (Toy).

No manual memory management is needed, reducing memory leaks.



‐----------------‐


chatgpt __


# Advanced Memory Management in Qt

## 1. Memory Management: Stack vs Heap

### Stack Memory
- Automatic memory allocation and deallocation.
- Safe space, but limited in size.
- Fast access since memory is allocated in a contiguous block.
- Used for local variables and function calls.

### Heap Memory
- Dynamically allocated memory.
- Accessed using pointers, which typically reside on the stack.
- Manual allocation (`new`) and deallocation (`delete`) required.
- Can cause memory leaks if not freed.

#### Example: Stack vs Heap Allocation
```cpp
#include <iostream>
using namespace std;

class Cat {
public:
    void meow() {
        cout << "Meow!" << endl;
    }
};

int main() {
    // Stack allocation
    Cat stackCat;  
    stackCat.meow();  

    // Heap allocation
    Cat* heapCat = new Cat();  
    heapCat->meow();  

    delete heapCat;  // Deallocating heap memory

    return 0;
}
```
#### Output:
```
Meow!
Meow!
```

---

## 2. Memory Leaks
- Occur when dynamically allocated memory is not deallocated.
- Stack memory is automatically cleared, but heap memory persists if not manually freed.
- Can cause excessive memory consumption and system slowdowns.

### Example of a Memory Leak
```cpp
void memoryLeak() {
    int* ptr = new int(10);  
    // Memory allocated but never deleted
}
```
ðŸ”´ **Fix:** Always use `delete` to free heap memory.

```cpp
void memoryLeakFixed() {
    int* ptr = new int(10);
    delete ptr;  
}
```

---

## 3. Dangling Pointers
- Occur when a pointer references deleted memory.

### Example of a Dangling Pointer
```cpp
int main() {
    Cat* c = new Cat();
    delete c;  
    c->meow();  // âŒ Accessing deleted object
}
```
ðŸ›  **Fix:** Always set pointer to `nullptr` after deletion.
```cpp
delete c;
c = nullptr; 
```

---

## 4. Smart Pointers
Smart pointers automatically manage memory, avoiding leaks and dangling pointers.

### Types of Smart Pointers
1. `unique_ptr` â€“ Only one owner of the resource.
2. `shared_ptr` â€“ Multiple references (reference counting).
3. `weak_ptr` â€“ Non-owning reference to a `shared_ptr`.
4. `auto_ptr` â€“ Deprecated, replaced by `unique_ptr`.

### Example: `shared_ptr`
```cpp
#include <iostream>
#include <memory>
using namespace std;

class Cat {
public:
    Cat() { cout << "Cat Constructed" << endl; }
    ~Cat() { cout << "Cat Destructed" << endl; }
    void meow() { cout << "Meow!" << endl; }
};

int main() {
    shared_ptr<Cat> kitty = make_shared<Cat>();  
    kitty->meow();  
    return 0;
}
```
#### Output:
```
Cat Constructed
Meow!
Cat Destructed
```

---

## 5. Qt Smart Pointers
### `QScopedPointer`
- Deletes the object automatically when it goes out of scope.

#### Example: `QScopedPointer`
```cpp
#include <QCoreApplication>
#include <QScopedPointer>
#include <QDebug>

class Test {
public:
    Test() { qInfo() << "Constructed"; }
    ~Test() { qInfo() << "Destructed"; }
};

void test() {
    QScopedPointer<Test> sp(new Test());
    qInfo() << "Scoped Pointer:" << sp.data(); //raw pointer to    the obj managed by smart pointer  -> Test(0x4567890)
}

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);
    test();
    return a.exec();
}
```
#### Output:
```
Constructed
Scoped Pointer: Test(0x...)
Destructed
```

---

### `QSharedPointer`
- Reference counting, deletes the object when no references remain.
->QSHAREDpOINTER IS A SMART POINTER THAT AUTO DELETE MEMORY,KEEPS TRACK OF HOW MANY SHARED POINTERS ARE POINTING TO THE SAME OBJECT and
only delete when last pointer goes out of scope!!
#### Example: `QSharedPointer`
```cpp
#include <QCoreApplication>
#include <QSharedPointer>
#include <QDebug>

class Test {
public:
    Test() { qInfo() << "Constructed"; }
    ~Test() { qInfo() << "Destructed"; }
};

QSharedPointer<Test> getObject() {
    return QSharedPointer<Test>(new Test());
}

void doWork(QSharedPointer<Test> sp) {
    qInfo() << "Work with:" << sp.data();
}

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    QSharedPointer<Test> ptr = getObject();
    doWork(ptr);
            ///ptr npw own the object and will delete i WHEN NO MORE SHARED POINTER REFERENCE IT!!!
    return a.exec();
}
```
#### Output:
```
Constructed
Work with: Test(0x...)
Destructed
```

---

## 6. Parent-Child Relationship in Qt
- Qt uses an object tree to manage memory.
- Parent automatically deletes child objects.

#### Example: Parent-Child Relationship
```cpp
#include <QCoreApplication>
#include <QObject>
#include <QDebug>

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    QObject parent;
    parent.setObjectName("Parent");

    QObject child1, child2;
    child1.setObjectName("Child1");
    child2.setObjectName("Child2");

    child1.setParent(&parent);
    child2.setParent(&parent);

    qInfo() << "Parent:" << &parent;
    qInfo() << "Children:" << parent.children();

    return a.exec();
}
```
#### Output:
```
Parent: QObject(0x...)
Children: (QObject(0x..., name="Child1"), QObject(0x..., name="Child2"))
```

---

## Exercise: Implement a Memory-Safe Object Manager

### Task:
Create a Qt program that:
1. Uses `QSharedPointer` to manage dynamically allocated objects.
2. Implements a parent-child hierarchy for QObject-based classes.
3. Ensures proper memory cleanup when objects go out of scope.

### Hints:
- Use `QSharedPointer<Test>` for memory management.
- Create a function to generate child objects dynamically.
- Print object hierarchy using `QObject::children()`.


