Encoding

ASCII -> Anerican Standard Code for Imformation interchange- ||7 bit|| character sett containing 128 characters,
-0-9
-a-z 97-
-A-Z 65-
You already use it
  http://www.asciitable.com/

This is the program -:


/*

  What
  ASCII

  Why
  No encoding

  How
  You already use it
  http://www.asciitable.com/

 ASCII is a 7-bit character set containing 128 characters.
 It contains the numbers from 0-9, the upper and lower case English letters from A to Z, and some special characters.
 The character sets used in modern computers, in HTML, and on the Internet, are all based on ASCII.

 */

||UTF-8||

#include <QCoreApplication>
#include <QDebug>
#include <QFile>
#include <QDir>

QByteArray makedata()
{
    QByteArray data;
    for(int i = 0; i < 10; i++) {
        data.append(72);
        data.append(101);
        data.append(108);
        data.append(108);
        data.append(111);
        data.append(33);
        data.append(13); // \r
        data.append(10); // \n

        // \r\n
    }
    return data;
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QByteArray data = makedata();
    qInfo() << data;//OUTPUT WILL BE /R /N INSTEAD 

    QFile file("data.txt");
    if(file.open(QIODevice::WriteOnly))
    {
        file.write(data);
        file.close();
    }

    qInfo() << "Done";

    return a.exec();
}
 
----------------------------------------------------------------------------------

UNICODE- used to support variety of languages other than English

Unicode encording -> UTF-8(1-4BYTES),UTF-16(2BYTES PER CHARACTER),UTF-32  ---->bits




QString uses UTF-16 by default
utf-16
/*

  What
  UTF16

  Why
  We want one or two 16-bit code units

  How
  UTF-16 is a character encoding capable of encoding all 1,112,064 non-surrogate code points of Unicode.
  The encoding is variable-length, as code points are encoded with one or two 16-bit code units

 */

#include <QCoreApplication>
#include <QDebug>
#include <QFile>
#include <QDir>
#include <QTextStream>
#include <QRandomGenerator>


QString makeData() {
    QString data;

    data.append("Unicode test\r\n");
    for(int i = 0; i < 10; i++) {
        int number = QRandomGenerator::global()->bounded(1024);

        data.append(QChar(number));
    }
    data.append("\r\n");

    return data;
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QString data = makeData();

    QFile file("data.txt");
    if(file.open(QIODevice::WriteOnly)) {

        QTextStream stream(&file);
   
         stream.setEncoding(QStringConverter::Utf16);
        stream << data;
        stream.flush();

        file.close();
    }

    qInfo() << "Done";
    qInfo() << "UTF16: " << data;
    qInfo() << "UTF8: " << data.toUtf8();
    qInfo() << "ASCII: " << data.toLatin1();


    return a.exec();
}



Base 64

/*

  What
  Base 64

  Why
  We want to transmit special characters
  Some protocols use special characters that can cause issues

  How
  Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation.
  The term Base64 originates from a specific MIME content transfer encoding.
  Each Base64 digit represents exactly 6 bits of data. Three 8-bit bytes (i.e., a total of 24 bits) can therefore be represented by four 6-bit Base64 digits.

*/

#include <QCoreApplication>

QString makeData() {
    QString data;
    for(int i = 0; i < 10; i++) {
        data.append("Hello\r\n");
    }
    return  data;
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QString data = makeData();
    QByteArray bytes(data.toUtf8());
    QByteArray encoded = bytes.toBase64();
    QByteArray decoded = QByteArray::fromBase64(encoded);

    qInfo() << "Encoded:" << encoded;
    qInfo(" --------------------------------------- ");
    qInfo() << "Decoded:" << decoded;


    return a.exec();
}



->toHex

/*

  What
  Base 64

  Why
  We want to transmit special characters
  Some protocols use special characters that can cause issues

  How
  Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation.
  The term Base64 originates from a specific MIME content transfer encoding.
  Each Base64 digit represents exactly 6 bits of data. Three 8-bit bytes (i.e., a total of 24 bits) can therefore be represented by four 6-bit Base64 digits.

*/

#include <QCoreApplication>
#include <QDebug>

QString makeData() {
    QString data;
    for(int i = 0; i < 10; i++) {
        data.append("Hello\r\n");
    }
    return  data;
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QString data = makeData();
    QByteArray bytes(data.toUtf8());
    QByteArray encoded = bytes.toHex();
    QByteArray decoded = QByteArray::fromHex(encoded);

    qInfo() << "Encoded:" << encoded;
    qInfo(" --------------------------------------- ");
    qInfo() << "Decoded:" << decoded;


    return a.exec();
}




------------‐----------------
Encoding in Qt - Learning Guide
==============================

This document explains character encoding in Qt with theory, code examples, and outputs.
Prepared by Grok 3 (xAI) on February 21, 2025.

---

1. ASCII (American Standard Code for Information Interchange)
============================================================

Theory
------
- What: ASCII is a 7-bit character encoding standard with 128 characters (0–127).
- Includes: Numbers (0–9), uppercase (A–Z, starts at 65), lowercase (a–z, starts at 97), special characters (e.g., newline, space).
- Why: Simple and widely supported but limited to English characters.
- How: Each character is represented by a single byte (8 bits, with the 8th bit typically 0).

Code
----
#include <QCoreApplication>
#include <QDebug>

QByteArray makeAsciiData() {
    QByteArray data;
    data.append(65); // 'A'
    data.append(66); // 'B'
    data.append(67); // 'C'
    data.append(13); // Carriage return (\r)
    data.append(10); // Newline (\n)
    return data;
}

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    QByteArray asciiData = makeAsciiData();
    qInfo() << "ASCII Bytes:" << asciiData;
    qInfo() << "As String:" << QString(asciiData);

    return a.exec();
}

Output
------
ASCII Bytes: "ABC\r\n"
As String: "ABC"

Explanation
-----------
- QByteArray stores raw bytes (e.g., 65 for 'A').
- When printed as a QString, Qt interprets the bytes as ASCII characters.
- \r\n (13, 10) is a Windows-style newline, but the console may show it as a single line break.

---

2. UTF-8
========

Theory
------
- What: UTF-8 is a variable-length Unicode encoding (1–4 bytes per character).
- Why: Extends ASCII to support a vast range of characters (e.g., emojis, non-English scripts) while remaining backward-compatible with ASCII.
- How: Characters 0–127 use 1 byte (same as ASCII); others use multiple bytes.

Code
----
#include <QCoreApplication>
#include <QDebug>
#include <QFile>

QByteArray makeData() {
    QByteArray data;
    for (int i = 0; i < 3; i++) { // Reduced to 3 for brevity
        data.append(72);  // 'H'
        data.append(101); // 'e'
        data.append(108); // 'l'
        data.append(108); // 'l'
        data.append(111); // 'o'
        data.append(33);  // '!'
        data.append(13);  // \r
        data.append(10);  // \n
    }
    return data;
}

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    QByteArray data = makeData();
    qInfo() << "Raw Data:" << data;

    QFile file("utf8_data.txt");
    if (file.open(QIODevice::WriteOnly)) {
        file.write(data);
        file.close();
        qInfo() << "File written successfully";
    } else {
        qInfo() << "Failed to open file";
    }

    return a.exec();
}

Output
------
Raw Data: "Hello!\r\nHello!\r\nHello!\r\n"
File written successfully

File Content (utf8_data.txt)
---------------------------
Hello!
Hello!
Hello!

Explanation
-----------
- QByteArray holds raw bytes, which are ASCII-compatible (and thus UTF-8 compatible for these characters).
- Writing to a file preserves the byte sequence. Since "Hello!" uses only ASCII characters, UTF-8 encodes them as single bytes.

---

3. UTF-16
=========

Theory
------
- What: UTF-16 is a variable-length Unicode encoding using 2 bytes (16 bits) per character for most cases, with surrogate pairs (4 bytes) for rare characters.
- Why: Supports all Unicode characters (1,112,064 code points) and is default for QString in Qt.
- How: Each character is typically 16 bits, but some use two 16-bit units.

Code
----
#include <QCoreApplication>
#include <QDebug>
#include <QFile>
#include <QTextStream>
#include <QRandomGenerator>

QString makeData() {
    QString data;
    data.append("Unicode test\r\n");
    for (int i = 0; i < 5; i++) { // Reduced to 5 for brevity
        int number = QRandomGenerator::global()->bounded(1024); // Random Unicode character
        data.append(QChar(number));
    }
    data.append("\r\n");
    return data;
}

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    QString data = makeData();

    QFile file("utf16_data.txt");
    if (file.open(QIODevice::WriteOnly)) {
        QTextStream stream(&file);
        stream.setEncoding(QStringConverter::Utf16);
        stream << data;
        stream.flush();
        file.close();
    }

    qInfo() << "Done";
    qInfo() << "UTF-16 Data:" << data;
    qInfo() << "UTF-8 Bytes:" << data.toUtf8();
    qInfo() << "ASCII (Latin1):" << data.toLatin1();

    return a.exec();
}

Sample Output
-------------
Done
UTF-16 Data: "Unicode test\r\nǗʌɐʨʍ\r\n"
UTF-8 Bytes: "Unicode test\r\n\xc7\x97\xca\x8c\xc9\xa0\xca\xa8\xca\x8d\r\n"
ASCII (Latin1): "Unicode test???"

Explanation
-----------
- QString uses UTF-16 internally, so data is already UTF-16.
- toUtf8() converts it to UTF-8, showing multi-byte sequences for non-ASCII characters (e.g., Ǘ).
- toLatin1() loses non-ASCII characters (replaced with ?), as Latin1 only supports 256 characters.

---

4. Base64
=========

Theory
------
- What: Base64 encodes binary data into an ASCII string using 64 characters (A–Z, a–z, 0–9, +, /).
- Why: Useful for transmitting binary data over text-only protocols (e.g., email, JSON).
- How: Every 3 bytes (24 bits) of binary data become 4 Base64 characters (6 bits each).

Code
----
#include <QCoreApplication>
#include <QDebug>

QString makeData() {
    QString data;
    for (int i = 0; i < 3; i++) { // Reduced to 3
        data.append("Hello\r\n");
    }
    return data;
}

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    QString data = makeData();
    QByteArray bytes = data.toUtf8();
    QByteArray encoded = bytes.toBase64();
    QByteArray decoded = QByteArray::fromBase64(encoded);

    qInfo() << "Original:" << bytes;
    qInfo() << "Encoded:" << encoded;
    qInfo() << "Decoded:" << decoded;

    return a.exec();
}

Output
------
Original: "Hello\r\nHello\r\nHello\r\n"
Encoded: "SGVsbG8NCkhlbGxvDQpIZWxsby0K"
Decoded: "Hello\r\nHello\r\nHello\r\n"

Explanation
-----------
- toUtf8() converts the QString to a QByteArray (UTF-8 bytes).
- toBase64() encodes it into a compact ASCII string.
- fromBase64() reverses the process, restoring the original bytes.

---

5. Hex Encoding (toHex)
======================

Theory
------
- What: Hex encoding converts binary data into a string of hexadecimal digits (0–9, a–f).
- Why: Useful for debugging or displaying raw bytes in a human-readable format.
- How: Each byte (8 bits) becomes two hex characters (4 bits each).

Code
----
#include <QCoreApplication>
#include <QDebug>

QString makeData() {
    QString data;
    for (int i = 0; i < 3; i++) {
        data.append("Hello\r\n");
    }
    return data;
}

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    QString data = makeData();
    QByteArray bytes = data.toUtf8();
    QByteArray encoded = bytes.toHex();
    QByteArray decoded = QByteArray::fromHex(encoded);

    qInfo() << "Original:" << bytes;
    qInfo() << "Hex Encoded:" << encoded;
    qInfo() << "Decoded:" << decoded;

    return a.exec();
}

Output
------
Original: "Hello\r\nHello\r\nHello\r\n"
Hex Encoded: "48656c6c6f0d0a48656c6c6f0d0a48656c6c6f0d0a"
Decoded: "Hello\r\nHello\r\nHello\r\n"

Explanation
-----------
- toHex() converts each byte to two hex digits (e.g., 'H' = 72 = "48").
- fromHex() decodes it back to the original bytes.
- The output is verbose but precise, showing every byte explicitly.

---

Summary Table
=============
Encoding   | Bits per Character | Use Case                          | Qt Class/Method
-----------|--------------------|-----------------------------------|-----------------
ASCII      | 7 (8 in practice)  | Basic English text               | QByteArray
UTF-8      | 8–32 (1–4 bytes)   | Universal text (ASCII + more)    | QString::toUtf8()
UTF-16     | 16–32 (1–2 units)  | Unicode (default in Qt)          | QTextStream::Utf16
Base64     | 6 per digit        | Binary-to-text transmission      | QByteArray::toBase64()
Hex        | 4 per digit        | Debugging, raw byte display      | QByteArray::toHex()

---

Learning Tips
=============
1. Experiment: Modify the code to include non-ASCII characters (e.g., "こんにちは" for Japanese) and see how UTF-8/UTF-16 handle them.
2. File Output: Open the generated files in a hex editor to see the raw bytes.
3. Qt Docs: Check QByteArray, QString, and QTextStream in the Qt documentation for more methods.

End of Guide
============
Feel free to ask for


