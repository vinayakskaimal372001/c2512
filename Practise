#include <QCoreApplication>
#include <QList>
#include <QDebug>

class Employee {
public:
    int id;
    QString name;

    Employee(int id, QString name) : id(id), name(name) {}
    ~Employee() {
        qDebug() << "Deleting Employee:" << name;
    }
};

int main() {
    QList<Employee*> empList;

    // Adding dynamically allocated Employee objects
    empList.append(new Employee(1, "Alice"));
    empList.append(new Employee(2, "Bob"));
    empList.append(new Employee(3, "Charlie"));

    qDebug() << "Employee list before deletion:";
    for (Employee* emp : empList) {
        qDebug() << emp->id << emp->name;
    }

    // Using qDeleteAll to delete all employee objects
    qDeleteAll(empList);
    empList.clear();  // Clears the list

    qDebug() << "Employee list after deletion. Size:" << empList.size();

    return 0;
}





#include <QCoreApplication>
#include <QList>
#include <QSharedPointer>
#include <QDebug>

class Employee {
public:
    int id;
    QString name;

    Employee(int id, QString name) : id(id), name(name) {}
    ~Employee() {
        qDebug() << "Deleting Employee:" << name;
    }
};

int main() {
    QList<QSharedPointer<Employee>> empList;

    // Using QSharedPointer to manage Employee objects
    empList.append(QSharedPointer<Employee>::create(1, "Alice"));
    empList.append(QSharedPointer<Employee>::create(2, "Bob"));
    empList.append(QSharedPointer<Employee>::create(3, "Charlie"));

    qDebug() << "Employee list before clearing:";
    for (const auto& emp : empList) {
        qDebug() << emp->id << emp->name;
    }

    // No need to call qDeleteAll(), QSharedPointer will handle deletion
    empList.clear();

    qDebug() << "Employee list cleared. Size:" << empList.size();

    return 0;
}




#include <QMap>
#include <QString>
#include <QDebug>

class Employee {
public:
    int id;
    QString name;

    Employee(int id, QString name) : id(id), name(name) {}
    ~Employee() { qDebug() << "Deleting Employee:" << name; }
};

int main() {
    QMap<int, Employee*> empMap;

    empMap.insert(1, new Employee(1, "Alice"));
    empMap.insert(2, new Employee(2, "Bob"));
    empMap.insert(3, new Employee(3, "Charlie"));

    qDebug() << "Before deleting:";
    for (auto it = empMap.begin(); it != empMap.end(); ++it) {
        qDebug() << it.key() << it.value()->name;
    }

    // Manually delete all allocated Employee objects
    qDeleteAll(empMap);
    empMap.clear();  // Clear the map after deleting elements

    qDebug() << "After clearing, size:" << empMap.size();

    return 0;
}


#include <QCoreApplication>
#include <QByteArray>
#include <QByteArrayView>
#include <QDebug>

void printData(QByteArrayView data) {
    qDebug() << "Data size:" << data.size();
    qDebug() << "First byte:" << data.at(0);
}

int main() {
    QByteArray byteArray = "Hello, QByteArrayView!";
    printData(byteArray);  // Implicit conversion to QByteArrayView

    const char rawData[] = "Raw C-style string";
    printData(QByteArrayView(rawData, sizeof(rawData)));  // Using raw data

    return 0;
}


#include <QMap>
#include <QSharedPointer>
#include <QDebug>

class Employee {
public:
    int id;
    QString name;

    Employee(int id, QString name) : id(id), name(name) {}
    ~Employee() { qDebug() << "Deleting Employee:" << name; }
};

int main() {
    QMap<int, QSharedPointer<Employee>> empMap;

    empMap.insert(1, QSharedPointer<Employee>::create(1, "Alice"));
    empMap.insert(2, QSharedPointer<Employee>::create(2, "Bob"));
    empMap.insert(3, QSharedPointer<Employee>::create(3, "Charlie"));

    qDebug() << "Before clearing:";
    for (auto it = empMap.begin(); it != empMap.end(); ++it) {
        qDebug() << it.key() << it.value()->name;
    }

    // No need to call qDeleteAll, just clear the map
    empMap.clear();

    qDebug() << "After clearing, size:" << empMap.size();

    return 0;
}


#include <QCoreApplication>
#include <QStringView>
#include <QString>
#include <QDebug>

void printString(QStringView strView) {
    qDebug() << "Length:" << strView.length();
    qDebug() << "First char:" << strView.at(0);
}

int main() {
    QString text = "Hello, QStringView!";
    printString(text);  // Implicit conversion from QString

    printString(QStringView(text).mid(7, 10));  // View over a substring

    return 0;
}
