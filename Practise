#include <QCoreApplication>
#include <QList>
#include <QDebug>

class Employee {
public:
    int id;
    QString name;

    Employee(int id, QString name) : id(id), name(name) {}
    ~Employee() {
        qDebug() << "Deleting Employee:" << name;
    }
};

int main() {
    QList<Employee*> empList;

    // Adding dynamically allocated Employee objects
    empList.append(new Employee(1, "Alice"));
    empList.append(new Employee(2, "Bob"));
    empList.append(new Employee(3, "Charlie"));

    qDebug() << "Employee list before deletion:";
    for (Employee* emp : empList) {
        qDebug() << emp->id << emp->name;
    }

    // Using qDeleteAll to delete all employee objects
    qDeleteAll(empList);
    empList.clear();  // Clears the list

    qDebug() << "Employee list after deletion. Size:" << empList.size();

    return 0;
}





#include <QCoreApplication>
#include <QList>
#include <QSharedPointer>
#include <QDebug>

class Employee {
public:
    int id;
    QString name;

    Employee(int id, QString name) : id(id), name(name) {}
    ~Employee() {
        qDebug() << "Deleting Employee:" << name;
    }
};

int main() {
    QList<QSharedPointer<Employee>> empList;

    // Using QSharedPointer to manage Employee objects
    empList.append(QSharedPointer<Employee>::create(1, "Alice"));
    empList.append(QSharedPointer<Employee>::create(2, "Bob"));
    empList.append(QSharedPointer<Employee>::create(3, "Charlie"));

    qDebug() << "Employee list before clearing:";
    for (const auto& emp : empList) {
        qDebug() << emp->id << emp->name;
    }

    // No need to call qDeleteAll(), QSharedPointer will handle deletion
    empList.clear();

    qDebug() << "Employee list cleared. Size:" << empList.size();

    return 0;
}




#include <QMap>
#include <QString>
#include <QDebug>

class Employee {
public:
    int id;
    QString name;

    Employee(int id, QString name) : id(id), name(name) {}
    ~Employee() { qDebug() << "Deleting Employee:" << name; }
};

int main() {
    QMap<int, Employee*> empMap;

    empMap.insert(1, new Employee(1, "Alice"));
    empMap.insert(2, new Employee(2, "Bob"));
    empMap.insert(3, new Employee(3, "Charlie"));

    qDebug() << "Before deleting:";
    for (auto it = empMap.begin(); it != empMap.end(); ++it) {
        qDebug() << it.key() << it.value()->name;
    }

    // Manually delete all allocated Employee objects
    qDeleteAll(empMap);
    empMap.clear();  // Clear the map after deleting elements

    qDebug() << "After clearing, size:" << empMap.size();

    return 0;
}


#include <QCoreApplication>
#include <QByteArray>
#include <QByteArrayView>
#include <QDebug>

void printData(QByteArrayView data) {
    qDebug() << "Data size:" << data.size();
    qDebug() << "First byte:" << data.at(0);
}

int main() {
    QByteArray byteArray = "Hello, QByteArrayView!";
    printData(byteArray);  // Implicit conversion to QByteArrayView

    const char rawData[] = "Raw C-style string";
    printData(QByteArrayView(rawData, sizeof(rawData)));  // Using raw data

    return 0;
}


#include <QMap>
#include <QSharedPointer>
#include <QDebug>

class Employee {
public:
    int id;
    QString name;

    Employee(int id, QString name) : id(id), name(name) {}
    ~Employee() { qDebug() << "Deleting Employee:" << name; }
};

int main() {
    QMap<int, QSharedPointer<Employee>> empMap;

    empMap.insert(1, QSharedPointer<Employee>::create(1, "Alice"));
    empMap.insert(2, QSharedPointer<Employee>::create(2, "Bob"));
    empMap.insert(3, QSharedPointer<Employee>::create(3, "Charlie"));

    qDebug() << "Before clearing:";
    for (auto it = empMap.begin(); it != empMap.end(); ++it) {
        qDebug() << it.key() << it.value()->name;
    }

    // No need to call qDeleteAll, just clear the map
    empMap.clear();

    qDebug() << "After clearing, size:" << empMap.size();

    return 0;
}


#include <QCoreApplication>
#include <QStringView>
#include <QString>
#include <QDebug>

void printString(QStringView strView) {
    qDebug() << "Length:" << strView.length();
    qDebug() << "First char:" << strView.at(0);
}

int main() {
    QString text = "Hello, QStringView!";
    printString(text);  // Implicit conversion from QString

    printString(QStringView(text).mid(7, 10));  // View over a substring

    return 0;
}




QSETTINGS NOTES

==============================
1ï¸âƒ£ NAVIGATING GROUPS IN QSETTINGS
==============================
- Groups in QSettings help organize settings logically.
- Methods:
  - `beginGroup("GroupName")` â†’ Enter a group.
  - `endGroup()` â†’ Exit a group.
  - `allKeys()` â†’ List all keys inside the current group.

ðŸ”¹ CODE EXAMPLE:
----------------------
#include <QCoreApplication>
#include <QSettings>
#include <QDebug>

int main() {
    QCoreApplication app(argc, nullptr);
    QSettings settings("MyCompany", "MyApp");

    settings.beginGroup("User");
    settings.setValue("username", "Sreya");
    settings.setValue("email", "sreya@example.com");
    settings.endGroup();

    settings.beginGroup("Appearance");
    settings.setValue("theme", "Dark");
    settings.setValue("font", "Arial");
    settings.endGroup();

    settings.beginGroup("User");
    qDebug() << "Username:" << settings.value("username").toString();
    qDebug() << "Email:" << settings.value("email").toString();
    settings.endGroup();

    settings.beginGroup("Appearance");
    qDebug() << "Theme:" << settings.value("theme").toString();
    qDebug() << "Font:" << settings.value("font").toString();
    settings.endGroup();

    return 0;
}

ðŸ”¹ OUTPUT:
----------------------
Username: "Sreya"
Email: "sreya@example.com"
Theme: "Dark"
Font: "Arial"

==============================
2ï¸âƒ£ SETTING A CUSTOM FILENAME IN QSETTINGS
==============================
- By default, QSettings stores data in the system registry or config files.
- We can store settings in an `.ini` file using:
  - `QSettings settings("config.ini", QSettings::IniFormat);`

ðŸ”¹ CODE EXAMPLE:
----------------------
#include <QSettings>
#include <QDebug>

int main() {
    QSettings settings("config.ini", QSettings::IniFormat);

    settings.setValue("User/username", "Sreya");
    settings.setValue("Appearance/theme", "Dark");

    qDebug() << "Username:" << settings.value("User/username").toString();
    qDebug() << "Theme:" << settings.value("Appearance/theme").toString();

    return 0;
}

ðŸ”¹ OUTPUT:
----------------------
Username: "Sreya"
Theme: "Dark"

ðŸ”¹ GENERATED config.ini FILE:
----------------------
[User]
username=Sreya

[Appearance]
theme=Dark

==============================
3ï¸âƒ£ NAVIGATING GROUPS IN A CUSTOM FILE
==============================
- To list all groups and keys in a `.ini` file:

ðŸ”¹ CODE EXAMPLE:
----------------------
QSettings settings("config.ini", QSettings::IniFormat);
qDebug() << "All groups:" << settings.childGroups();

settings.beginGroup("User");
qDebug() << "Keys in User group:" << settings.allKeys();
settings.endGroup();

ðŸ”¹ OUTPUT:
----------------------
All groups: ("User", "Appearance")
Keys in User group: ("username")

==============================
4ï¸âƒ£ DELETING A GROUP OR KEY
==============================
- To remove a specific key:
  - `settings.remove("User/username");`
- To remove a group and all keys inside:
  ```cpp
  settings.beginGroup("User");
  settings.remove("");
  settings.endGroup();
  ```

==============================
ðŸ”¹ SUMMARY TABLE
==============================

| Feature                | Code |
|------------------------|------|
| Set Organization Name  | `QSettings settings("MyCompany", "MyApp");` |
| Set Custom Filename    | `QSettings settings("config.ini", QSettings::IniFormat);` |
| Store a Setting        | `settings.setValue("User/username", "Sreya");` |
| Retrieve a Setting     | `settings.value("User/username").toString();` |
| Enter a Group         | `settings.beginGroup("User");` |
| Exit a Group          | `settings.endGroup();` |
| List All Groups       | `settings.childGroups();` |
| List Keys in a Group  | `settings.allKeys();` |
| Delete a Key         | `settings.remove("User/username");` |
| Delete a Group       | `settings.beginGroup("User"); settings.remove(""); settings.endGroup();` |

