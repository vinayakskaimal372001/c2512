QComboBox in Qt
=========================
QComboBox is a Qt widget that functions as a drop-down menu, allowing users to select an item from a predefined list. 
It can also accept user input, making it a versatile widget for forms and selection lists.

Understanding the Program
=========================
The provided program creates a Qt dialog with a QComboBox, a label (lblSelected), and a save button (btnSave). 
The program does the following:

1. Initialization (init()):
   - Clears the combo box.
   - Populates it with 10 items labeled "Item number 0" to "Item number 9".

2. Loading Previous Selection (load()):
   - Reads the previously saved combo box index from a settings file using QSettings.
   - If a valid index exists, it selects that index in the combo box.

3. Handling User Selection (on_comboBox_currentIndexChanged(int index)):
   - When a user selects an item, it updates the label (lblSelected) with the selected index and text.

4. Saving the Selection (on_btnSave_clicked()):
   - When the save button is clicked, it stores the current index of the combo box using QSettings.
   - A message box confirms that the selection has been saved.

Code Breakdown
=========================
#include "dialog.h"
#include "ui_dialog.h"

Dialog::Dialog(QWidget *parent)
    : QDialog(parent)
    , ui(new Ui::Dialog)
{
    ui->setupUi(this);

    init();  // Initialize the combo box items
    load();  // Load previously saved selection
}

Dialog::~Dialog()
{
    delete ui;
}

void Dialog::on_comboBox_currentIndexChanged(int index)
{
    ui->lblSelected->setText( QString::number(index) + " = " + ui->comboBox->currentText());
}

void Dialog::on_btnSave_clicked()
{
    QSettings settings("MySoft", "MyApp"); // Define settings with an organization and app name
    settings.setValue("settings", ui->comboBox->currentIndex()); // Save the current index

    QMessageBox::information(this,"Saved","Selection saved, please close and re-open the application");
}

void Dialog::init()
{
    ui->comboBox->clear();  // Clears any existing items

    for (int i = 0; i < 10; i++)
    {
        ui->comboBox->addItem("Item number " + QString::number(i)); // Adds 10 items
    }
}

void Dialog::load()
{
    QSettings settings("MySoft", "MyApp"); // Access previously saved settings
    QVariant value = settings.value("settings", 0); // Get the saved index (default to 0 if not found)

    bool ok;
    int index = value.toInt(&ok); // Convert to integer safely
    if (!ok)
    {
        QMessageBox::critical(this, "Loading Error", "Error loading selection!");
        return;
    }

    if (index < ui->comboBox->count()) // Ensure index is within valid range
    {
        ui->comboBox->setCurrentIndex(index);
    }
    else
    {
        ui->comboBox->setCurrentIndex(0); // Default to index 0 if out of range
    }
}

How QSettings Works and Stores Data
=========================
QSettings provides persistent storage for settings such as user preferences. It saves data in different formats based on the platform:

- Windows: Stores data in the Windows Registry.
- Linux/macOS: Stores data in an .ini file or a configuration directory.

Example of .ini File Format (Linux/macOS)
=========================
If this program runs on Linux/macOS, it creates a configuration file MyApp.conf with content like:

[settings]
settings=3

If the user selects "Item number 3" and saves it, the value 3 is stored under the key "settings".

Execution Flow
=========================
1. First Run:
   - Combo box is populated.
   - No saved settings exist, so index 0 is selected.

2. User Selection:
   - User selects "Item number 3".
   - Label updates to "3 = Item number 3".

3. Saving and Closing:
   - User clicks Save.
   - QSettings stores index 3 in MyApp.conf.

4. Reopening the Application:
   - load() retrieves the saved index.
   - setCurrentIndex(3) restores the selection.

Summary
=========================
âœ” QComboBox provides a dropdown menu.
âœ” QSettings saves the selected index persistently.
âœ” Data is stored in a text file (.ini on Linux/macOS) or Windows Registry.
âœ” User-friendly: On reopening, the last selection is restored.
