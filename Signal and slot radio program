/* What Disconnecting

Why
We want to disconnect a signal from a slot

How
Use the disconnect function
This also talks about the connection types

*/

#include <QCoreApplication> #include <QDebug> #include <QTextStream> #include <iostream> #include "radio.h" #include "station.h"

using namespace std;

int main(int argc, char *argv[]) { QCoreApplication a(argc, argv);

Radio boombox;
Station* channels[3];
bool bOn = false;
//create some stations
channels[0] = new Station(&boombox,94,"Rock and Roll");
channels[1] = new Station(&boombox,87,"Hip Hop");
channels[2] = new Station(&boombox,104,"News");

boombox.connect(&boombox,&Radio::quit,&a, &QCoreApplication::quit,Qt::QueuedConnection); //flaw

//    for(int i = 0; i< 3; i++) //    { //        Station* channel = channels[i]; //        boombox.connect(channel,&Station::send,&boombox, &Radio::listen); //    }

do
{
qInfo() << "Enter on, off, test or quit";
QTextStream qtin(stdin);
QString line = qtin.readLine().trimmed().toUpper();

if((line == "ON") && (bOn==false)) //if(line == "ON")  
{  
    qInfo() << "Turning the radio on";  
    for(int i = 0; i< 3; i++)  
    {  
        Station* channel = channels[i];  
        boombox.connect(channel,&Station::send,&boombox, &Radio::listen);  
    }  
    qInfo() << "Radio is on";  
    bOn = true;  
}  

if(line == "OFF")  
{  
    qInfo() << "Turning the radio off";  
    for(int i = 0; i< 3; i++)  
    {  
        Station* channel = channels[i];  
        boombox.disconnect(channel,&Station::send,&boombox, &Radio::listen);  
    }  
    qInfo() << "Radio is off";  
    bOn = false;  
}  

if(line == "TEST")  
{  
    qInfo() << "Testing";  
    for(int i = 0; i< 3; i++)  
    {  
        Station* channel = channels[i];  
        channel->broadcast("Broadcasting live!");  
    }  
    qInfo() << "Test complete";  
}  

if(line == "QUIT")  
{  
    qInfo() << "Quitting";  
    emit boombox.quit();  
    break;  
}

} while(true);

return a.exec();

}#ifndef RADIO_H #define RADIO_H

#include <QObject> #include <QDebug>

class Radio : public QObject { Q_OBJECT public: explicit Radio(QObject *parent = nullptr);

signals: void quit();

public slots: void listen(int channel,QString name, QString message);

};

#endif // RADIO_H#include "radio.h"

Radio::Radio(QObject *parent) : QObject(parent) {

}

void Radio::listen(int channel, QString name, QString message) { qInfo() << channel << " " << name << " - " << message; }#ifndef STATION_H #define STATION_H

#include <QObject> #include <QDebug>

class Station : public QObject { Q_OBJECT public: explicit Station(QObject *parent = nullptr, int channel = 0, QString name = "unknown"); QString name; int channel;

signals: void send(int channel,QString name, QString message);

public slots: void broadcast(QString message);

};

#endif // STATION_H#include "station.h"

Station::Station(QObject *parent, int channel, QString name) : QObject(parent) { this->channel = channel; this->name = name; }

void Station::broadcast(QString message) { emit send(channel,name,message); } explain code how

Explain easy to understand each line






# **Qt Signals and Slots - Radio and Station Example**

## **1. Overview**  
This program simulates a **radio system** where:  
- A `Radio` object can listen to different `Station` objects.  
- Users can **turn the radio ON/OFF**, **test broadcasting**, and **quit the program**.  
- **Signals and Slots** are used for communication between `Radio` and `Station`.  

---

## **2. Classes and Their Purpose**  
### **a. `Radio` Class**  
- Represents a radio that listens to stations.  
- Contains a signal `quit()` and a slot `listen()`.  
- `listen()` displays the broadcasted message.

```cpp
class Radio : public QObject
{
    Q_OBJECT
public:
    explicit Radio(QObject *parent = nullptr);

signals:
    void quit(); // Signal emitted when quitting.

public slots:
    void listen(int channel, QString name, QString message);
};
```

### **b. `Station` Class**  
- Represents a radio station with a **channel number** and **name**.  
- Contains a signal `send()` and a slot `broadcast()`.  
- `broadcast()` emits `send()` signal with a message.

```cpp
class Station : public QObject
{
    Q_OBJECT
public:
    explicit Station(QObject *parent = nullptr, int channel = 0, QString name = "unknown");
    QString name;
    int channel;

signals:
    void send(int channel, QString name, QString message);

public slots:
    void broadcast(QString message);
};
```

---

## **3. `main.cpp` - How the Program Works**  

### **a. Creating Objects**  
```cpp
Radio boombox;  
Station* channels[3];  
bool bOn = false;
```
- Creates a `Radio` object named `boombox`.  
- Creates an **array of `Station` pointers** (`channels[]`).  
- `bOn` keeps track of whether the radio is on/off.  

### **b. Creating Stations**  
```cpp
channels[0] = new Station(&boombox, 94, "Rock and Roll");
channels[1] = new Station(&boombox, 87, "Hip Hop");
channels[2] = new Station(&boombox, 104, "News");
```
- Three stations are created and assigned to `channels[]`.  
- They are **linked to `boombox`** as a parent for automatic memory management.

### **c. Connecting Quit Signal**  
```cpp
boombox.connect(&boombox, &Radio::quit, &a, &QCoreApplication::quit, Qt::QueuedConnection);
```
- **Flaw**: `boombox` should not be explicitly mentioned as the sender.  
- It connects `boombox.quit()` to `QCoreApplication::quit()`, which **exits the application**.

### **d. User Input Handling (Loop)**  
```cpp
do {
    qInfo() << "Enter on, off, test or quit";  
    QTextStream qtin(stdin);  
    QString line = qtin.readLine().trimmed().toUpper();
```
- Reads user input (`ON`, `OFF`, `TEST`, or `QUIT`).  
- Converts input to uppercase for case-insensitive comparison.

### **e. Turning the Radio On**  
```cpp
if ((line == "ON") && (bOn == false)) {  
    qInfo() << "Turning the radio on";  
    for(int i = 0; i < 3; i++) {  
        Station* channel = channels[i];  
        boombox.connect(channel, &Station::send, &boombox, &Radio::listen);
    }  
    qInfo() << "Radio is on";  
    bOn = true;  
}
```
- **Connects** each station's `send` signal to `boombox.listen()`.  
- When a station **broadcasts**, `boombox.listen()` will print the message.  

### **f. Turning the Radio Off**  
```cpp
if (line == "OFF") {  
    qInfo() << "Turning the radio off";  
    for(int i = 0; i < 3; i++) {  
        Station* channel = channels[i];  
        boombox.disconnect(channel, &Station::send, &boombox, &Radio::listen);
    }  
    qInfo() << "Radio is off";  
    bOn = false;  
}
```
- **Disconnects** each station from `boombox`.  
- `boombox.listen()` will no longer receive messages.

### **g. Testing Broadcast**  
```cpp
if (line == "TEST") {  
    qInfo() << "Testing";  
    for(int i = 0; i < 3; i++) {  
        Station* channel = channels[i];  
        channel->broadcast("Broadcasting live!");
    }  
    qInfo() << "Test complete";  
}
```
- Calls `broadcast("Broadcasting live!")` for all stations.  
- **Each station emits `send()` signal**, triggering `boombox.listen()`.  
- Example output:
  ```
  94  Rock and Roll - Broadcasting live!
  87  Hip Hop - Broadcasting live!
  104 News - Broadcasting live!
  ```

### **h. Quitting the Program**  
```cpp
if (line == "QUIT") {  
    qInfo() << "Quitting";  
    emit boombox.quit();  
    break;  
}
```
- Emits `boombox.quit()`, which triggers `QCoreApplication::quit()`.  
- Breaks the loop, exiting the program.

---

## **4. Key Qt Concepts Used**  
| Concept        | Explanation |
|---------------|------------|
| **Signals & Slots** | `send()` and `listen()` allow communication between objects. |
| **QObject Hierarchy** | `boombox` is the parent of `Station` objects for automatic memory management. |
| **Connection Types** | Uses `Qt::QueuedConnection` for event-driven execution. |
| **User Input Handling** | Uses `QTextStream` to read commands from the console. |
| **Dynamic Connection/Disconnection** | Connects and disconnects signals dynamically to control behavior. |

---

## **5. Fixing the `connect()` Flaw**  
### **Problem:**  
```cpp
boombox.connect(&boombox, &Radio::quit, &a, &QCoreApplication::quit, Qt::QueuedConnection);
```
- `boombox` **should not be explicitly given** as the sender.  
- Inside `Radio`, use `this` instead:

### **Corrected Code:**  
```cpp
connect(this, &Radio::quit, &a, &QCoreApplication::quit);
```

---

## **6. Summary**  
- **ON**: Connects stations to radio.  
- **OFF**: Disconnects stations from radio.  
- **TEST**: Broadcasts messages from all stations.  
- **QUIT**: Emits `quit()` signal to exit the program.  
- **Uses Signals & Slots to simulate real-world radio communication.**  





