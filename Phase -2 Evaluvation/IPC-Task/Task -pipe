#include <string>
#include <thread>
#include <algorithm>
#include <unistd.h>
#include <cstring>
#include <iostream>
#include <vector>
#include <climits>

using namespace std;

class labTest {
private:
    string labTestId;
    int result;

public:
    labTest(string labTestId, int result) : labTestId(labTestId), result(result) {}

    int getresult() {
        return result;
    }
};

void findSum(const vector<int>& vec, int start, int end, int& sum) {
    for (int i = start; i < end; i++) {
        sum += vec[i];
    }
}

void client(vector<labTest>& vec, int& write_end_fd1, int& read_end_fd2) {
    int size = vec.size();
    write(write_end_fd1, &size, sizeof(size)); 
    int buffer[size];
    for (int i = 0; i < size; i++) {
        buffer[i] = vec[i].getresult();
    }
    write(write_end_fd1, buffer, sizeof(buffer)); 

    cout << "client: ";
    for (int i = 0; i < size; i++) {
        cout << buffer[i] << " ";
    }
    cout << endl;

    close(write_end_fd1); 

    sleep(2);

    int totalSum = 0, sum1 = 0, sum2 = 0;
    read(read_end_fd2, &totalSum, sizeof(totalSum)); 
    read(read_end_fd2, &sum1, sizeof(sum1));         
    read(read_end_fd2, &sum2, sizeof(sum2));         

    cout << "total sum: " << totalSum <<endl<< " Sum of first half : "<< sum1 << "Sum of Second half : " << sum2 << endl;
    close(read_end_fd2); 
}

void server(int& read_end_fd1, int& write_end_fd2) {
    sleep(1);

    int size;
    read(read_end_fd1, &size, sizeof(size)); 

    int buffer[size];
    read(read_end_fd1, buffer, sizeof(buffer)); 

    cout << "server: ";
    for (int i = 0; i < size; i++) {
        cout << buffer[i] << " ";
    }
    cout << endl;

    close(read_end_fd1); 

    vector<int> vec(buffer, buffer + size); 

    int sum1 = 0, sum2 = 0;
    int mid = size / 2;

    thread t1(findSum, vec, 0, mid, ref(sum1));      
    thread t2(findSum, vec, mid, size, ref(sum2));  

    t1.join();
    t2.join();

    int totalSum = sum1 + sum2;

    write(write_end_fd2, &totalSum, sizeof(totalSum)); 
    write(write_end_fd2, &sum1, sizeof(sum1));         
    write(write_end_fd2, &sum2, sizeof(sum2));         

    cout << "sum sent: " << totalSum << endl;
}

int main() {
    vector<labTest> vec;
    vec.emplace_back("vm1", 2);
    vec.emplace_back("vm2", 5);
    vec.emplace_back("vm3", 6);
    vec.emplace_back("vm4", 3);
    vec.emplace_back("vm5", 1);

    int pipe_fd1[2];
    int pipe_fd2[2]; 

    if (pipe(pipe_fd1) == -1 || pipe(pipe_fd2) == -1) {
        perror("pipe");
        return 1;
    }

    pid_t pid = fork();
    if (pid == 0) {
        close(pipe_fd1[0]); 
        close(pipe_fd2[1]); 
        client(vec, pipe_fd1[1], pipe_fd2[0]);
        return 0;
    }

    pid = fork();
    if (pid == 0) {
        close(pipe_fd1[1]); 
        close(pipe_fd2[0]);
        server(pipe_fd1[0], pipe_fd2[1]);
        return 0;
    }

    close(pipe_fd1[0]);
    close(pipe_fd1[1]);
    close(pipe_fd2[0]);
    close(pipe_fd2[1]);

    sleep(3); 
    return 0;
}
