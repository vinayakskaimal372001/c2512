#include <iostream>
#include <vector>
#include <thread>
#include <unistd.h>
#include <sys/wait.h>
#include <cstring>
#include <string>

using namespace std;

class LabTest 
{
private:
    string TestId;
    double ResultValues;
public:
    LabTest(string id, double value) : TestId(id), ResultValues(value) {}

    string getTestId() const { return TestId; }
    double getResultValues() const { return ResultValues; }
};

void calculatePartialSum(const double* data, int start, int end, double& partialSum) {
    partialSum = 0;
    for (int i = start; i < end; ++i) {
        partialSum += data[i];
    }
}

void process(int read_from_client, int write_to_client) {
    double buffer[100];
    int size;
    double totalSum = 0;

    // Read size and data from client
    read(read_from_client, &size, sizeof(size));
    read(read_from_client, buffer, sizeof(double) * size);

    cout << "Server received Result Values: ";
    for (int i = 0; i < size; ++i) {
        cout << buffer[i] << " ";
    }
    cout << endl;

    // Variables for partial sums
    double firstHalfSum = 0, secondHalfSum = 0;

    // Create threads for parallel sum calculation
    thread t1(calculatePartialSum, buffer, 0, size / 2, ref(firstHalfSum));
    thread t2(calculatePartialSum, buffer, size / 2, size, ref(secondHalfSum));

    // Join threads
    t1.join();
    t2.join();

    // Combine results
    totalSum = firstHalfSum + secondHalfSum;

    cout << "Server calculated sum: " << totalSum << endl;

    // Send sum back to client
    write(write_to_client, &totalSum, sizeof(totalSum));

    close(read_from_client);
    close(write_to_client);
}

int main() {
    int pipe_client_to_server[2];
    int pipe_server_to_client[2];

    // Create pipes
    if (pipe(pipe_client_to_server) == -1 || pipe(pipe_server_to_client) == -1) {
        perror("Pipe creation failed");
        return 1;
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("Fork failed");
        return 1;
    }

    if (pid == 0) {  // Child process (Client)
        close(pipe_client_to_server[0]);
        close(pipe_server_to_client[1]);

        vector<LabTest> tests = {
            LabTest("T001", 10.0),
            LabTest("T002", 20.0),
            LabTest("T003", 30.0),
            LabTest("T004", 40.0),
            LabTest("T005", 50.0)
        };

        int size = tests.size();
        double arr[100];

        // Fill the array with result values
        for (int i = 0; i < size; ++i) {
            arr[i] = tests[i].getResultValues();
        }

        cout << "Client sending Result Values: ";
        for (int i = 0; i < size; ++i) {
            cout << arr[i] << " ";
        }
        cout << endl;

        // Send data to server
        write(pipe_client_to_server[1], &size, sizeof(size));
        write(pipe_client_to_server[1], arr, sizeof(double) * size);

        // Read sum from server
        double sum;
        read(pipe_server_to_client[0], &sum, sizeof(sum));
        cout << "Client received sum from server: " << sum << endl;

        close(pipe_client_to_server[1]);
        close(pipe_server_to_client[0]);
        exit(0);
    } else {  // Parent process (Server)
        close(pipe_client_to_server[1]);
        close(pipe_server_to_client[0]);
        process(pipe_client_to_server[0], pipe_server_to_client[1]);
        wait(nullptr);  // Wait for child process
    }

    return 0;
}
