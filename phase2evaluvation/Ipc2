#include <iostream>
#include <vector>
#include <thread>
#include <unistd.h>
#include <climits>
#include <cstring>

using namespace std;

class labTest {
private:
    string labTestId;
    double result;

public:
    labTest(string labTestId, double result) : labTestId(labTestId), result(result) {}

    double getresult() {
        return result;
    }
};

void calculatePartialSum(const double* data, int start, int end, double& partialSum) {
    partialSum = 0;
    for (int i = start; i < end; ++i) {
        partialSum += data[i];
    }
}

void client(vector<labTest>& vec, int& write_end_fd1, int& read_end_fd2) {
    int size = vec.size();
    write(write_end_fd1, &size, sizeof(size)); // Send size to server

    double buffer[size];
    for (int i = 0; i < vec.size(); i++) {
        buffer[i] = vec[i].getresult();
    }

    // Send data to server
    write(write_end_fd1, buffer, sizeof(buffer));

    cout << "Client sending result values: ";
    for (int i = 0; i < size; i++) {
        cout << buffer[i] << " ";
    }
    cout << endl;

    close(write_end_fd1); // Close write end

    // Read sum from server
    double sum = 0;
    read(read_end_fd2, &sum, sizeof(double));
    cout << "Client received total sum: " << sum << endl;
    close(read_end_fd2); // Close read end
}

void server(int& read_end_fd1, int& write_end_fd2) {
    int size;
    double buffer[100];

    // Read size from client
    read(read_end_fd1, &size, sizeof(size));

    // Read data from client
    double a[size];
    read(read_end_fd1, a, sizeof(double) * size);
    close(read_end_fd1); // Close read end

    cout << "Server received result values: ";
    for (int i = 0; i < size; i++) {
        cout << a[i] << " ";
    }
    cout << endl;

    // Use threads to calculate partial sums
    double firstHalfSum = 0, secondHalfSum = 0;
    thread t1(calculatePartialSum, a, 0, size / 2, ref(firstHalfSum));
    thread t2(calculatePartialSum, a, size / 2, size, ref(secondHalfSum));

    t1.join();
    t2.join();

    double totalSum = firstHalfSum + secondHalfSum;
    cout << "Server calculated total sum: " << totalSum << endl;

    // Send sum back to client
    write(write_end_fd2, &totalSum, sizeof(totalSum));
    close(write_end_fd2); // Close write end
}

int main() {
    vector<labTest> vec;
    vec.emplace_back("am1", 2.45);
    vec.emplace_back("am2", 5.34);
    vec.emplace_back("am3", 6.56);
    vec.emplace_back("am4", 3.43);
    vec.emplace_back("am5", 1.23);

    int pipe_fd1[2], pipe_fd2[2];

    // Create pipes
    if (pipe(pipe_fd1) == -1 || pipe(pipe_fd2) == -1) {
        perror("Pipe creation failed");
        return 1;
    }

    int& read_end_fd1 = pipe_fd1[0];
    int& write_end_fd1 = pipe_fd1[1];
    int& write_end_fd2 = pipe_fd2[1];
    int& read_end_fd2 = pipe_fd2[0];

    pid_t pid = fork();
    if (pid == -1) {
        perror("Fork failed");
        return 1;
    }

    if (pid == 0) { // Child process (Client)
        close(read_end_fd1);
        close(write_end_fd2);
        client(vec, write_end_fd1, read_end_fd2);
        return 0;
    } else { // Parent process (Server)
        close(write_end_fd1);
        close(read_end_fd2);
        server(read_end_fd1, write_end_fd2);
        wait(nullptr); // Wait for child to finish
    }

    return 0;
}
