Share


You said:
[POC] 1, 1.1, 1.2, 1.2.1
Application [1] [POC]
    ::Driver Registration::
    ::Login:: 

    ::Driver Registration:: [1.1][POC] 
        - page title
        - form : name, password, email, phone, 
                 car_number, car_model, car_type 
            - fields: (caption, error message(s))
                name {required}
                password {required, strength}
                email {required, isEmail, isExist}
                phone {required, 10-digits isPhoneNumber, isExist}
                car_number {required, isExist}
                car_model {required}
                car_type {selectable}
        - on form submit: 
            - allow to edit field / group of fields !XXX
            - OR Confirm  
            - OR Exit  
        - after form submit:
            - successful message 
    ::Login:: [1.2] [POC]
        - page title
        - form : username, password (caption, error message(s))
            - fields 
                username {required}
                password {required}
            - on form submit 
                - Logging Into App 
                OR
                - Invalid Username / Password message.
            - after form submit: 
                - successful message welcoming the user 
                - DISPATCH / ROUTE to the page 
        ::Driver Page::
            ::Home Page:: [1.2.1] [POC]
                - page title
                Welcome minhaj!
                Car: TN48 Z1020, Innova, SUV, Parking:[10-Feb-2025 10:00-21:00, Spot: GR-001 / Not Parked]
                Reservation History ![last 10 - sort by date desc]
                    Date    Start Time      End Time    Amount 
                Nav Pages: 
                    [1] View/Edit Profile [2] Do Reservation / [3] Pay and Unpark 
                    [4] Change Password 
                    [99] Logout 
            ::Do Reservation:: [1.2.1.2] 
                - page title
                Welcome minhaj!
                Car: TN48 Z1020, Innova, SUV, Parking: Not Parked
                 - form : date, start_time, end_time
                    - fields 
                        date {required, isDate}
                        start_time {required, isTime}
                        end_time {required, isTime}
                    - on form submit: 
                        - allow to edit field / group of fields !XXX
                        - OR Confirm  
                        - OR Exit  
                    - after form submit:
                        - parking spot is allocated
                        - successful message 
                            - booking number is generated
            ::Pay and Unpark:: [1.2.1.3]
                - page title
                Welcome minhaj!
                Car: TN48 Z1020, Innova, SUV, Parking:10-Feb-2025 10:00-21:00, Spot: GR-001
                 - form : pay_mode 
                    - fields                        
                        actial_end_time {required, isTime} !!!{display <systetime>}
                        duration {display <calculated>}
                        amount  {display <calculated>}
                        pay_mode {selectable}
                    - on form submit: 
                        - OR Confirm  
                        - OR Exit  
                    - after form submit:
                        - successful message 
                            - payment receipt number is generated
            ::Driver Profile:: [1.2.1.1]
                - page title
                - form : name, email, phone, 
                        car_number, car_model, car_type !!if no parking history 
                    - fields: (caption, error message(s))
                        name {required}
                        email {required, isEmail, isExist}
                        phone {required, 10-digits isPhoneNumber, isExist}
                        car_number {required, isExist}
                        car_model {required}
                        car_type {selectable}
                - on form submit: 
                    - allow to edit field / group of fields !XXX
                    - OR Confirm  
                    - OR Exit  
                - after form submit:
                    - successful message 
            ::Change Password: [1.2.1.4]
                - page title
                - form : old_password, new_password
                    - fields: (caption, error message(s))
                        old_password {required}
                        new_password {required, strength}
                - on form submit: 
                    - OR Confirm  
                    - OR Exit  
                - after form submit:
                    - successful message 
                        - logout 
        ::Admin Page::
            ::Home Page:: [1.2.2]
                -Nav Pages: 
                    [1] Admins Management [2] Floor Management [3] Spot Management 
                    [4] Bookings History [5] Payments History
                    [99] Logout 
            ::Admins Management:: [1.2.2.1]
                -Nav Pages: 
                    [1] Create [2] Edit [3] Search [4] Delete
                    [5] Change Password 
                    [99] Exit 
            ::Floor Management:: [1.2.2.2]
                    [1] Create [2] Edit [3] Search [4] Delete 
                    [5] Display Spots Availability
                    [99] Exit
            ::Spot Management:: [1.2.2.3]
                    [1] Create [2] Edit [3] Search [4] Delete 
                    [99] Exit    
            ::Bookings History:: [1.2.2.4]
                    [1] Today Bookings [2] Bookings By Date         ! display table {Time Car   Driver  Parking} 10:00 TN 45 Z1020 Minhaj GR-001 10-Feb-2025 10:00-21:00
                    [99] Exit            
            ::Payments History:: [1.2.2.5]
                    [1] Today Payments [2] Payments By Date         ! display table {Time Car   Driver  Parking Amount} 10:00 TN 45 Z1020 Minhaj GR-001 1000
                    [99] Exit 

    Above given is the structure of an app. below given is the common ui 
#pragma once
#include <termios.h>
#include <unistd.h>

#include<iostream>
#include<limits>

#include<string>

#include "ui_settings.h"

class UiCommon {
    public:
        void Clear() {  
#if CLRSCR_METHOD == 1
            std::cout << "\033[2J\033[1;1H"; 
#else 
            system("clear");
#endif
        }
        void Line(char ch) {
            for(int I =0; I < 80; I++) {
                std::cout << ch;
            }
            std::cout << std::endl;
        }
        void Title(std::string title) {
            std::cout << title << std::endl;
        }
        void TitleBar(std::string title, char lineCh='-') {
            Clear();
            Line(lineCh);
            Title(title);
            Line(lineCh);
        }
        void PressAnyKey(bool beforeNumber = false) {
            std::cout << "Press any key to continue..."; 
            std::cin.get();
            if(beforeNumber) {
                std::cin.get();
            }
        }

        class Input {
            public:
                Input() {
                    srand(static_cast<unsigned>(time(0)));
                }
                std::string Str(std::string caption = "") {
                    std::cout << caption;

                    std::string str;
                    std::cin >> str;
                    return str;
                }
                int Int(std::string caption = "") {
                    std::string str = this->Str(caption);
                    try {
                        // Convert to int
                        int intValue = std::stoi(str);
                        return intValue;
                    } catch (const std::invalid_argument& e) {
                        std::cerr << "Invalid Number" << std::endl;
                        return this->Int(caption);
                    }
                }
                float Float(std::string caption = "") {
                    std::string str = this->Str(caption);
                    try {
                        // Convert to int
                        int intValue = std::stof(str);
                        return intValue;
                    } catch (const std::invalid_argument& e) {
                        std::cerr << "Invalid Number" << std::endl;
                        return this->Float(caption);
                    }
                }
                double Double(std::string caption = "") {
                    std::string str = this->Str(caption);
                    try {
                        // Convert to int
                        int intValue = std::stod(str);
                        return intValue;
                    } catch (const std::invalid_argument& e) {
                        std::cerr << "Invalid Number" << std::endl;
                        return this->Double(caption);
                    }
                }
                int giveMeNumber(int start, int end)
                {	
                    const int MAX_SIZE = end - start + 1;
                    int num = rand() % MAX_SIZE;
                    num += start;
                    return num;
                }
                bool exist() {
                    int num = giveMeNumber(1,10);
                    return (num == 1);
                }
        };

        Input in;
};

extern UiCommon uiCommon;
use this ui and build the above app but not fully, just do the entire driver registration, use two tables named users.dat and car.dat . in user.dat the datas should be added are  userid, name , password, phone niumber, email. and in the car.dat table add datas like car id , user id ,car number , car model , car  type.
and in the createing the driver page after entering all the details print options for editing each of the entered data , number the options like 1,2,4,8,16 etc and use bitwise operation for checking which option is selected, ie option & 1 !=0 then that option is chosed. so that the sum of the option number will allow us to edit the options in that combination,  print an example to show how it is done.
and put the last option(99) as confirm to create . after pressing that go back to the previous menu ie 1)driver registration 2)login 99)exit
so after this login option is selected prompt for entering name and password is given, after entering that the credentials are validated, then if it is correct we move to next page that is Driver Page.
in Driver Page first print a welcome message with the username and some details. and  the options are view/edit profile, do reservation, pay and unpark, change password, 99)logout (which will return to the first login page)
these are my requirements , give me all the cpp files that are needed here in a source folder and all the header files needed in headers folder and a makefile to run this . put all these in folder named app . and give me that app folder.
think yourself and do this in perfect way.
