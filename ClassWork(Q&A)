->What all topics did we study in each phase. 

In Phase 1, we learned the basics of programming, starting with machine and high-level languages, compilers, and IDEs. We practiced solving problems using algorithms, flowcharts, and pseudocode, and wrote simple C++ programs using input/output, control statements (if-else, switch-case), and loops (for, while, do-while). We also studied databases, focusing on DBMS and RDBMS, and learned to write SQL queries for tasks like inserting, updating, and retrieving data using joins and subqueries. This phase built a strong foundation in programming and database management.


->Write a C++ program to store employee details and implement Add, Display, Remove using a structure array.

#include <iostream>
#include <string>
using namespace std;

struct Employee {
    int id;
    string name;
    double salary;
};

class EmployeeManager {
private:
    Employee employees[100];     
  int count;
 public:
    EmployeeManager() : count(0) {}

    void addEmployee(int id, string name, double salary) {
        if (count < 100) {
            employees[count] = {id, name, salary};
            count++;
            cout << "Employee added successfully.\n";
        } else {
            cout << "Employee list is full!\n";
        }
    }

    void displayEmployees() {
        if (count == 0) {
            cout << "No employees to display.\n";
            return;
        }
        for (int i = 0; i < count; i++) {
            cout << "ID: " << employees[i].id
                 << ", Name: " << employees[i].name
                 << ", Salary: $" << employees[i].salary << endl;
        }
    }

    void removeEmployee(int id) {
        for (int i = 0; i < count; i++) {
            if (employees[i].id == id) {
                for (int j = i; j < count - 1; j++) {
                    employees[j] = employees[j + 1];
                }
                count--;
                cout << "Employee removed successfully.\n";
                return;
            }
        }
        cout << "Employee with ID " << id << " not found.\n";
    }
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(1, "John Doe", 50000);
    manager.addEmployee(2, "Jane Smith", 60000);

    cout << "Displaying all employees:\n";
    manager.displayEmployees();

    manager.removeEmployee(1);
    cout << "After removing employee with ID 1:\n";
    manager.displayEmployees();

    return 0;
}




->Replace spaces with underscores in a string.


#include <iostream>
#include <string>
using namespace std;

int main() {
    string str = "Hi my name is vinayak"
    for (int i = 0; i < str.length(); i++) {
        if (str[i] == ' ') {
            str[i] = '_';
        }
    }

or we can write 
for (char &ch : str) {
        if (ch == ' ') 
ch = '_';
    }


    cout << str << endl;
    return 0;
}





->Display both A from the Base class and B from the Derived class.

#include <iostream>
using namespace std;

class Base {
public:
    void display() {
        cout << "A" << endl;
    }
};

class Derived : public Base {
public:
    void display() {
        cout << "B" << endl;
    }
};

int main() {
    Derived obj;

        obj.display(); // Output: B

      obj.Base::display(); // Output: A

    return 0;
}


->Design a base class Vehicle and derived classes Car and Bike. Override a function to show specific vehicle details using runtime polymorphism.


#include <iostream>
using namespace std;

class Vehicle {
public:
    virtual void showDetails() const {
        cout << "This is a vehicle." << endl;
    }

        virtual ~Vehicle() {}
};

class Car : public Vehicle {
public:
    void showDetails() const override {
        cout << "This is a Car. It has 4 wheels and is suitable for long drives." << endl;
    }
};

class Bike : public Vehicle {
public:
    void showDetails() const override {
        cout << "This is a Bike. It has 2 wheels and is fuel efficient." << endl;
    }
};

int main() {
       Vehicle* vehicle1 = new Car();
    vehicle1->showDetails();       
 Vehicle* vehicle2 = new Bike();
    vehicle2->showDetails(); 
       delete vehicle1;
    delete vehicle2;

    return 0;
}



->static function

Static functions in C++ are class-level functions that belong to the class rather than any specific object. They are declared using the static keyword and can be accessed without creating an object of the class, using the class name. Static functions can only access other static members (variables or functions) of the class since they do not operate on any instance. They are commonly used for utility purposes or to manage shared data among all objects. For example, a static function can count the number of objects created or provide general-purpose functionalities like mathematical operations. Static members are initialized outside the class, and their scope is global to the class.



->Object-Oriented Programming (OOP) Concepts in C++


Object-Oriented Programming (OOP) is a programming paradigm that organizes code around objects rather than functions. It focuses on making code reusable, scalable, and modular by encapsulating data and behavior into objects. C++ implements OOP through its core principles:

1. Encapsulation
Definition: Encapsulation is the bundling of data (variables) and methods (functions) that operate on the data into a single unit called a class. It also involves restricting direct access to some components using access specifiers (public, private, protected).
Example:
cpp
Copy code
class Car {
private:
    int speed;
public:
    void setSpeed(int s) { speed = s; }
    int getSpeed() { return speed; }
};
2. Inheritance
Definition: Inheritance allows a class (derived class) to inherit properties and methods from another class (base class), promoting reusability and hierarchy.
Example:
cpp
Copy code
class Vehicle {
public:
    void start() { cout << "Vehicle started"; }
};
class Car : public Vehicle {
public:
    void drive() { cout << "Car is driving"; }
};
3. Polymorphism
Definition: Polymorphism allows objects to be treated as instances of their parent class while exhibiting different behaviors. It is achieved through function overloading, operator overloading, and virtual functions (runtime polymorphism).
Example:
cpp
Copy code
class Vehicle {
public:
    virtual void sound() { cout << "Generic vehicle sound"; }
};
class Car : public Vehicle {
public:
    void sound() override { cout << "Car horn sound"; }
};
4. Abstraction
Definition: Abstraction hides unnecessary implementation details from the user and exposes only the functionality through abstract classes or interfaces.
Example:
cpp
Copy code
class Vehicle {
public:
    virtual void move() = 0; // Pure virtual function
};
class Car : public Vehicle {
public:
    void move() { cout << "Car is moving"; }
};
5. Class and Object
Definition: A class is a blueprint for creating objects, and objects are instances of classes that hold data and functions.
Example:
cpp
Copy code
class Dog {
public:
    string breed;
    void bark() { cout << "Woof!"; }
};
Dog d;
d.bark();




->Vehicle Class with Polymorphism

#include <iostream>
using namespace std;

class Vehicle {
public:
    virtual void showDetails() { cout << "Vehicle details\n"; }
};

class Car : public Vehicle {
public:
    void showDetails() override { cout << "Car details\n"; }
};

class Bike : public Vehicle {
public:
    void showDetails() override { cout << "Bike details\n"; }
};

int main() {
    Vehicle* v1 = new Car();
    Vehicle* v2 = new Bike();
    v1->showDetails();
    v2->showDetails();
    delete v1;
    delete v2;
    return 0;
}


->Static Functions

class Example {
    static int count;
public:
    static void increment() { count++; }
    static int getCount() { return count; }
};

int Example::count = 0;

int main() {
    Example::increment();
    cout << "Count: " << Example::getCount() << endl;
    return 0;
}


->Operator Overloading


#include <iostream>
using namespace std;

class Complex {
    float real, imag;
public:
    Complex(float r, float i) : real(r), imag(i) {}
    Complex operator+(const Complex& other) {
        return Complex(real + other.real, imag + other.imag);
    }
    void display() { cout << real << " + " << imag << "i\n"; }
};

int main() {
    Complex c1(1.1, 2.2), c2(3.3, 4.4);
    Complex c3 = c1 + c2;
    c3.display();
    return 0;
}


->Abstraction Example
#include <iostream>
using namespace std;

class Abstract {
public:
    virtual void showDetails() = 0; // Pure virtual function
};

class Implementation : public Abstract {
public:
    void showDetails() override { cout << "Details\n"; }
};

int main() {
    Abstract* obj = new Implementation();
    obj->showDetails();
    delete obj;
    return 0;
}



->Virtual Functions


#include <iostream>
using namespace std;

class Abstract {
public:
    virtual void showDetails() = 0; // Pure virtual function
};

class Implementation : public Abstract {
public:
    void showDetails() override { cout << "Details\n"; }
};

int main() {
    Abstract* obj = new Implementation();
    obj->showDetails();
    delete obj;
    return 0;
}


->Access Specifiers
Public: Accessible everywhere.
Private: Accessible within the class.
Protected: Accessible within the class and derived classes.


->Friend Function
#include <iostream>
using namespace std;

class A {
    int x;
public:
    A(int val) : x(val) {}
    friend void show(A obj);
};

void show(A obj) {
    cout << "Value: " << obj.x << endl;
}

int main() {
    A a(10);
    show(a);
    return 0;
}


->Typedef
typedef unsigned int uint;
uint num = 42;



->Stack Implementation
#include <stack>
int main() {
    stack<int> s;
    s.push(10);
    s.pop();
    return 0;
}


->Structure vs Class
Structure: Default public,doesnot have member function
Class: Default private,have there on member functions


->Const Keyword

const int x = 10; // Constant variable
int const *ptr;   // Pointer to constant
int *const ptr2;  // Constant pointer


->OOPs concept

OOP Concepts :
Major pillars::
1. Encapsulation:
Definition: Encapsulation is the bundling of data (variables) and methods (functions) that operate on the data into a single unit, typically a class. It also involves restricting access to the internal details of the class, exposing only necessary parts through public methods.
Protects data from unauthorized access.
Improves modularity and maintainability.
Implementation in C++:
Use private or protected access specifiers for data members.
Provide public getter and setter functions to access or modify the data.
2.2. Inheritance:
Definition: Inheritance is a mechanism where a class (derived class) inherits properties and behaviors (data members and member functions) from another class (base class). This promotes reusability and establishes a relationship between classes.
Types of Inheritance:
Single, Multiple, Multilevel, Hierarchical, Hybrid.
Why Inheritance?
Avoid code duplication by reusing base class functionality.
Supports hierarchical classifications.
Implementation in C++:
Use the : symbol followed by public, protected, or private inheritance
Polymorphism means "many forms." It allows the same operation or function to behave differently based on the context
Compile-Time Polymorphism:
Achieved through function overloading and operator overloading.
Determined during the compilation phase.
Run-Time Polymorphism:
Achieved through function overriding using virtual functions.
Determined during program execution using dynamic dispatch.
Allows flexibility in code by enabling one interface for different implementations.
Implementation in C++:
Compile-Time: Function overloading.
Run-Time: Virtual functions and overriding.
4. Abstraction:
Definition: Abstraction is the process of hiding the implementation details of a class and exposing only the essential features.
Reduces complexity by focusing on high-level design.
Protects the implementation from external interference.
Implementation in C++:
Achieved using abstract classes (classes with at least one pure virtual function) or interfaces.

->Stack and Quene

Stack: Last In, First Out (LIFO)
Definition: A stack is a linear data structure that follows the LIFO (Last In, First Out) principle, meaning the last element added to the stack is the first one to be removed.

Push: Add an element to the top of the stack.
Pop: Remove the top element of the stack.
Peek/Top: View the top element without removing it.
IsEmpty: Check if the stack is empty.

#include <iostream>
#include <stack>
using namespace std;

int main() {
    stack<int> s;
    s.push(10);  // Push 10
    s.push(20);  // Push 20
    cout << "Top of stack: " << s.top() << endl;  // Output: 20
    s.pop();  // Remove 20
    cout << "Top after pop: " << s.top() << endl;  // Output: 10
    return 0;
}

 Queue: First In, First Out (FIFO)
Definition: A queue is a linear data structure that follows the FIFO (First In, First Out) principle, meaning the first element added to the queue is the first one to be removed.

Operations:

Enqueue: Add an element to the rear of the queue.
Dequeue: Remove an element from the front of the queue.
Front: View the front element without removing it.
IsEmpty: Check if the queue is empty.

#include <iostream>
#include <queue>
using namespace std;

int main() {
    queue<int> q;
    q.push(10);  // Enqueue 10
    q.push(20);  // Enqueue 20
    cout << "Front of queue: " << q.front() << endl;   
  q.pop();  
    cout << "Front after dequeue: " << q.front() << endl;  
    return 0;
}


->OOP Real-Time Example: ATM Machine

An ATM Machine is an excellent real-world example of Object-Oriented Programming (OOP). Here's how the four key OOP concepts apply to an ATM system:
Encapsulation:
Sensitive data, like account balance and PIN, is hidden using private attributes. These can only be accessed or modified through public methods like checkBalance(), withdraw(), or deposit(). This ensures the security of the user’s information.
class Account {
private:
    int accountNumber;
    double balance;
public:
    void deposit(double amount) { balance += amount; }
    bool withdraw(double amount) { 
        if (amount <= balance) {
            balance -= amount;
            return true;
        } else {
            return false;
        }
    }
    double getBalance() { return balance; }
};

Inheritance:

Different types of accounts, such as SavingsAccount and CurrentAccount, inherit common features from a base class Account. Each type of account can have specific rules, like interest rates or withdrawal limits.
class SavingsAccount : public Account {
private:
    double interestRate;
public:
    void applyInterest() { balance += balance * interestRate; }
};

Polymorphism:

The ATM can treat all accounts uniformly but calls specific methods based on the account type at runtime. This is done using function class Account {
public:
    virtual void displayAccountType() {
        cout << "General Account" << endl;
    }
};

class SavingsAccount : public Account {
public:
    void displayAccountType() override {
        cout << "Savings Account" << endl;
    }
};

class CurrentAccount : public Account {
public:
    void displayAccountType() override {

        cout << "Current Account" << endl;
    }
};

Abstraction:

Users interact with the ATM through a simplified interface: they can withdraw money, check their balance, or deposit cash without knowing how these operations are implemented internally. The internal workings, like database queries or transaction protocols, are abstracted away.

class ATM {
public:
    void performTransaction(Account &account) {
        account.displayAccountType();
        cout << "Transaction completed!" << endl;
    }
};

->Access Specifiers in C++
Public:
Members declared as public are accessible from anywhere in the program.
They are often used for functions that provide an interface to interact with the class or to expose constants.


class Car {
public:
    string brand;
    void startEngine() {
        cout << brand << " engine started!" << endl;
    }
};

int main() {
    Car car;
    car.brand = "Toyota";  // Accessible directly because it's public
    car.startEngine();     // Accessible directly
    return 0;
}

Private:
Members declared as private are only accessible within the same class.
They are used to hide sensitive data and implement encapsulation by restricting direct access.
Access is provided through public or protected member functions.

class BankAccount {
private:
    double balance;

public:
    BankAccount(double initialBalance) { balance = initialBalance; }

    void deposit(double amount) {
        balance += amount;
        cout << "Deposited: " << amount << endl;
    }

    double getBalance() {
        return balance;
    }
};

int main() {
    BankAccount account(1000);
    // account.balance = 2000; // Error: Cannot access private member directly
    account.deposit(500);       // Access via public function
    cout << "Balance: " << account.getBalance() << endl; // Access via public function
    return 0;
}

Protected:
Members declared as protected are accessible within the same class and derived classes.
Useful in inheritance to allow derived classes access while preventing external access.

class Animal {
protected:
    int age;
};

class Dog : public Animal {
public:
    void setAge(int a) { age = a; }  // Accessible because `age` is protected
    int getAge() { return age; }
};

int main() {
    Dog dog;
    // dog.age = 5; // Error: Cannot access protected member directly
    dog.setAge(5);  // Access via derived class function
    cout << "Dog's age: " << dog.getAge() << endl;
    return 0;
}










